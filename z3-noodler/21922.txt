;; universe for var40:
  ;;   var40!val!1 var40!val!0 
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun var40!val!1 () var40)
  (declare-fun var40!val!0 () var40)
  ;; cardinality constraint:
  (forall ((x var40)) (or (= x var40!val!1) (= x var40!val!0)))
  ;; -----------
  (define-fun null-var40 () var40
    var40!val!1)
  (define-fun var1356 () var40
    var40!val!0)
  (define-fun var2212 () String
    (trim-right (trim-left var1202)))
  (define-fun null-Bool () Bool
    false)
  (define-fun var2299 () (Array Int String)
    var1214)
  (define-fun null-String () String
    "\u{0}\u{0}")
  (define-fun var661 () Int
    0)
  (define-fun var1202 () String
    "!")
  (define-fun var1437 () Bool
    true)
  (define-fun var1252 () Int
    (let ((a!1 (< (num_splits (trim-right (trim-left var1202)) "\s*,\s*") (- 1))))
(let ((a!2 (ite a!1
                (num_splits (trim-right (trim-left var1202)) "\s*,\s*")
                (- 1))))
  (ite (> (- 1) 0) a!2 (num_splits (trim-right (trim-left var1202)) "\s*,\s*")))))
  (define-fun var1214 () (Array Int String)
    ((as const (Array Int String)) ""))