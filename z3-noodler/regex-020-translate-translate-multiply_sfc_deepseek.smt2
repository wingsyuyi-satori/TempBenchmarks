(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (re.* (re.++ (re.* (str.to_re "[[")) (str.to_re "zz")))))
(assert (= (str.len x) 6))
(assert (not (= x "[[zzzz")))
(assert (not (= x "zz[[zz")))
(assert (not (= x "[[[[zz")))

; --- LLM Generated Split Constraints ---
; Basic split operations on string x with "[" as delimiter
(declare-const x_part0 String)
(declare-const x_part1 String)
(assert (= x_part0 (str.split_at x "[" 0))) ; First segment before first "["
(assert (= x_part1 (str.split_at x "[" 1))) ; Second segment between first and second "["
; ; Validate split results
(assert (<= (str.len x_part0) 2)) ; First part should be empty or "z"
(assert (<= (str.len x_part1) 4)) ; Second part should be between 2-4 chars
; Count number of splits
(assert (>= (str.num_splits x "[") 1)) ; At least one split exists
(assert (<= (str.num_splits x "[") 3)) ; At most three splits
; Get remaining segments after first split
(declare-const x_rest String)
(assert (= x_rest (str.split_rest x "[" 1))) ; Everything after first "["
(assert (str.contains x_rest "z")) ; Rest must contain "z"
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
