(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Strict email validation with additional constraints
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Strict email validation with domain structure constraints
(declare-const email_addr String)

; Basic email format constraints
(assert (>= (str.len email_addr) 3)) 
(assert (= (str.num_splits email_addr "@") 1))
(assert (str.contains email_addr "."))

; Split into local and domain parts using str.split_at and str.split_rest
(declare-const local String)
(declare-const domain String)
(assert (= local (str.split_at email_addr "@" 0)))
(assert (= domain (str.split_rest email_addr "@" 1)))

; Local part constraints with str.num_splits
(assert (>= (str.len local) 1))
(assert (= (str.num_splits local "..") 1)) 
(assert (not (str.prefixof "." local)))
(assert (not (str.suffixof "." local)))

; Domain part must have multiple components
(assert (>= (str.num_splits domain ".") 2))

; Complex domain splitting using multiple str.split_at and str.split_rest
(declare-const subdomain1 String)
(declare-const rest1 String)
(declare-const subdomain2 String) 
(declare-const rest2 String)
(assert (= subdomain1 (str.split_at domain "." 0)))
(assert (= rest1 (str.split_rest domain "." 1)))
(assert (= subdomain2 (str.split_at rest1 "." 0)))
(assert (= rest2 (str.split_rest rest1 "." 1)))

; Domain component constraints with str.num_splits
(assert (>= (str.len subdomain1) 1))
(assert (>= (str.len subdomain2) 1))
(assert (>= (str.len rest2) 2))
(assert (= (str.num_splits subdomain1 "@") 0))

; Complex TLD validation using str.split_at and str.split_rest
(declare-const tld_parts String)
(assert (= tld_parts (str.split_rest domain "." (str.num_splits domain "."))))

; Additional constraint: Local part cannot be only digits
(assert (not (str.is_digit (str.split_at local "" 0))))

; Constraint: Domain must have at least 3 characters after last dot
(declare-const last_dot_index Int)
(assert (= last_dot_index (- (str.len domain) (str.len (str.split_rest domain "." (str.num_splits domain "."))))))
(assert (>= (- (str.len domain) last_dot_index) 4))

; Complex email structure validation using multiple splits
(declare-const pre_at String)
(declare-const post_at String)
(assert (= pre_at (str.split_at email_addr "@" 0)))
(assert (= post_at (str.split_rest email_addr "@" 1)))

; Final validation combining all split results
(assert (= local pre_at))
(assert (= domain post_at))
(assert (str.contains (str.split_rest post_at "." 1) "."))

(check-sat)
(exit)
(get-model)
