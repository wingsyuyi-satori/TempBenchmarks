(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_201252 () String)
(assert (= T_1 (not (= "" var_0xINPUT_201252))))
(assert T_1)
(assert (= T_2 (= var_0xINPUT_201252 "array")))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_201252 by "a", expect at least 3 segments
(declare-const seg_count Int)
(assert (= seg_count (str.num_splits var_0xINPUT_201252 "a")))
(assert (>= seg_count 3))
; ; Extract first and second segments after split by "a"
(declare-const seg0 String)
(declare-const seg1 String)
(assert (= seg0 (str.split_at var_0xINPUT_201252 "a" 0)))
(assert (= seg1 (str.split_at var_0xINPUT_201252 "a" 1)))
; Further split seg1 by "r", collect two components
(declare-const seg1_0 String)
(declare-const seg1_1 String)
(assert (= seg1_0 (str.split_at seg1 "r" 0)))
(assert (= seg1_1 (str.split_at seg1 "r" 1)))
; Cross-dependency: seg0 must equal seg1_1
(assert (= seg0 seg1_1))
; Validation: the concatenation of seg1_0 and seg1_1 is seg1
(assert (= seg1 (str.++ seg1_0 "r" seg1_1)))
; ; Advanced constraint: seg1_0 is not empty, seg1_1 is a prefix of "ray"
(assert (not (= seg1_0 "")))
(assert (str.prefixof seg1_1 "ray"))
; Length relationship: seg0 is shorter than seg1_0
(assert (< (str.len seg0) (str.len seg1_0)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
