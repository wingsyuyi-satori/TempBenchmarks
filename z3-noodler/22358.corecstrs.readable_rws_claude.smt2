(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV field validation and escape handling
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Multi-format data processing with different delimiters
(declare-const tsv_record String)
(declare-const pipe_record String)
(declare-const semicolon_record String)

; TSV processing - tab-separated values
(declare-const tsv_name String)
(declare-const tsv_age String)
(declare-const tsv_email String)
(declare-const tsv_department String)

(assert (= tsv_name (str.split_at tsv_record "\t" 0)))
(assert (= tsv_age (str.split_at tsv_record "\t" 1)))
(assert (= tsv_email (str.split_at tsv_record "\t" 2)))
(assert (= tsv_department (str.split_at tsv_record "\t" 3)))

; TSV must have exactly 4 fields
(assert (= (str.num_splits tsv_record "\t") 4))

; Pipe-delimited processing
(declare-const pipe_product String)
(declare-const pipe_price String)
(declare-const pipe_category String)

(assert (= pipe_product (str.split_at pipe_record "|" 0)))
(assert (= pipe_price (str.split_at pipe_record "|" 1)))
(assert (= pipe_category (str.split_at pipe_record "|" 2)))

; Pipe record has at least 3 fields
(assert (>= (str.num_splits pipe_record "|") 3))

; Semicolon-delimited processing with empty field handling
(declare-const semi_field_count Int)
(assert (= semi_field_count (str.num_splits semicolon_record ";")))
(assert (>= semi_field_count 2))

; ; Extract first two fields from semicolon record
(declare-const semi_first String)
(declare-const semi_second String)
(assert (= semi_first (str.split_at semicolon_record ";" 0)))
(assert (= semi_second (str.split_at semicolon_record ";" 1)))

; Validation constraints
; Name field cannot be empty
(assert (> (str.len tsv_name) 0))

; ; Age field must be numeric (simple check - no letters)
(assert (not (str.contains tsv_age "a")))
(assert (not (str.contains tsv_age "z")))
(assert (> (str.len tsv_age) 0))

; Email must contain @ symbol
(assert (str.contains tsv_email "@"))

; Product name has minimum length
(assert (>= (str.len pipe_product) 3))

; Price field cannot be empty
(assert (> (str.len pipe_price) 0))

; Handle empty fields in semicolon format
; Allow empty second field but not first
(assert (> (str.len semi_first) 0))

; Escape sequence validation
; No unescaped quotes in TSV fields
(assert (not (str.contains tsv_name """)))
(assert (not (str.contains tsv_email """)))

; No delimiter characters within pipe fields
(assert (not (str.contains pipe_product "|")))
(assert (not (str.contains pipe_category "|")))

; ; Cross-format consistency check
; If we have the same data in different formats, lengths should be related
(declare-const format_consistency_check String)
(assert (= format_consistency_check (str.split_rest pipe_record "|" 1)))
(assert (>= (str.len format_consistency_check) 5))

(check-sat)
(get-model)
