(set-info :source |
; URL Parsing with Protocol, Host, and Path Extraction
 Generated by Claude Code for SMT solver constraint analysis
|)
(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)

; Variable declarations for URL components
(declare-fun url () String)
(declare-fun protocol () String)
(declare-fun host () String)
(declare-fun path () String)
(declare-fun query_string () String)
(declare-fun param_key () String)
(declare-fun param_value () String)

; Additional variables for intermediate parsing
(declare-fun protocol_host_part () String)
(declare-fun host_path_part () String)
(declare-fun path_query_part () String)
(declare-fun first_path_segment () String)
(declare-fun second_path_segment () String)

; URL structure: protocol://host/path?query
(assert (= url "https://api.example.com/v1/users?active=true&limit=10"))

; ; Protocol extraction using :// delimiter
(assert (= protocol (str.split_at url "://" 0)))
(assert (= protocol_host_part (str.split_at url "://" 1)))

; Protocol validation constraints
(assert (or (= protocol "http") (= protocol "https") (= protocol "ftp")))
(assert (> (str.len protocol) 0))

; ; Host extraction using first / after protocol
(assert (= host (str.split_at protocol_host_part "/" 0)))
(assert (= host_path_part (str.split_rest protocol_host_part "/" 1)))

; Host structure validation
(assert (str.contains host "."))
(assert (> (str.len host) 3))
(assert (not (str.prefixof "." host)))
(assert (not (str.suffixof "." host)))

; ; Path extraction using ? delimiter to separate from query
(assert (= path_query_part host_path_part))
(assert (= path (str.split_at path_query_part "?" 0)))
(assert (= query_string (str.split_at path_query_part "?" 1)))

; Path segment analysis
(assert (= first_path_segment (str.split_at path "/" 0)))
(assert (= second_path_segment (str.split_at path "/" 1)))

; Path validation constraints
(assert (str.prefixof "/" path))
(assert (>= (str.num_splits path "/") 2))
(assert (= first_path_segment ""))
(assert (= second_path_segment "v1"))

; ; Query parameter extraction using & delimiter
(assert (>= (str.num_splits query_string "&") 2))
(assert (= param_key (str.split_at (str.split_at query_string "&" 0) "=" 0)))
(assert (= param_value (str.split_at (str.split_at query_string "&" 0) "=" 1)))

; Parameter validation
(assert (= param_key "active"))
(assert (or (= param_value "true") (= param_value "false")))

; Additional structural constraints
(assert (str.contains url "://"))
(assert (= (str.num_splits url "://") 2))
(assert (> (str.len (str.split_at url "://" 1)) 0))

; Host subdomain analysis
(assert (>= (str.num_splits host ".") 3))
(assert (= (str.split_at host "." 0) "api"))
(assert (= (str.split_at host "." 1) "example"))
(assert (= (str.split_at host "." 2) "com"))

; Path depth validation
(assert (<= (str.num_splits path "/") 4))
(assert (> (str.len (str.split_at path "/" 2)) 0))

; Query string structure
(assert (str.contains query_string "="))
(assert (str.contains query_string "&"))
(assert (= (str.split_at (str.split_at query_string "&" 1) "=" 0) "limit"))
(assert (= (str.split_at (str.split_at query_string "&" 1) "=" 1) "10"))

; Security constraints for URL validation
(assert (not (str.contains host ":")))
(assert (not (str.contains path "..")))
(assert (not (str.prefixof "/" host)))

; Protocol-specific port validation
(assert (=> (= protocol "https") (not (str.contains url ":80"))))
(assert (=> (= protocol "http") (not (str.contains url ":443"))))

; Complete URL reconstruction validation
(assert (= url (str.++ protocol "://" host path "?" query_string)))

; Path segment count consistency
(assert (= (str.num_splits path "/") 3))
(assert (= (str.split_at path "/" 3) "users"))

; Final validation constraints
(assert (and (> (str.len protocol) 0)
 (> (str.len host) 0)
 (> (str.len path) 0)))

(check-sat)
(exit)
(get-model)
