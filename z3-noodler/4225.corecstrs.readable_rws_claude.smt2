(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV field validation and processing
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; TSV record with tab delimiters
(declare-const tsv_record String)
(declare-const header_line String)

; Tab-separated values processing
(assert (>= (str.num_splits tsv_record "\t") 4))
(assert (= (str.num_splits header_line "\t") (str.num_splits tsv_record "\t")))

; ; Extract TSV fields
(declare-const name_field String)
(declare-const age_field String)
(declare-const email_field String)
(declare-const status_field String)
(assert (= name_field (str.split_at tsv_record "\t" 0)))
(assert (= age_field (str.split_at tsv_record "\t" 1)))
(assert (= email_field (str.split_at tsv_record "\t" 2)))
(assert (= status_field (str.split_at tsv_record "\t" 3)))

; Name field validation - no empty names
(assert (> (str.len name_field) 0))
(assert (not (str.contains name_field "\t")))

; Age field must be numeric representation
(assert (> (str.len age_field) 0))
(assert (<= (str.len age_field) 3))

; Email field must contain @ symbol
(assert (str.contains email_field "@"))
(assert (> (str.len email_field) 3))

; Status field can be empty but if present must be valid
(assert (or (= (str.len status_field) 0) 
 (and (>= (str.len status_field) 1) 
 (or (= status_field "active") 
 (= status_field "inactive") 
 (= status_field "pending")))))

; Pipe-delimited alternative format
(declare-const pipe_data String)
(declare-const converted_data String)

; Pipe format must have exactly 5 fields
(assert (= (str.num_splits pipe_data "|") 5))

; ; Extract pipe fields for validation
(declare-const id_field String)
(declare-const category_field String)
(declare-const price_field String)
(declare-const quantity_field String)
(declare-const description_field String)

(assert (= id_field (str.split_at pipe_data "|" 0)))
(assert (= category_field (str.split_at pipe_data "|" 1)))
(assert (= price_field (str.split_at pipe_data "|" 2)))
(assert (= quantity_field (str.split_at pipe_data "|" 3)))
(assert (= description_field (str.split_at pipe_data "|" 4)))

; ID field must be non-empty and numeric
(assert (and (> (str.len id_field) 0) (<= (str.len id_field) 8)))

; Category field validation
(assert (> (str.len category_field) 0))
(assert (not (str.contains category_field "|")))

; Price field can be empty (free items) or contain decimal
(assert (or (= (str.len price_field) 0) 
 (and (> (str.len price_field) 0) 
 (<= (str.len price_field) 10))))

; Quantity must be present
(assert (> (str.len quantity_field) 0))

; Description can be empty
(assert (>= (str.len description_field) 0))

; Semicolon-delimited format handling
(declare-const semicolon_record String)

; Must have at least 2 fields
(assert (>= (str.num_splits semicolon_record ";") 2))

; ; Extract first two fields
(declare-const key_field String)
(declare-const value_field String)
(declare-const csv_line String)
(assert (= key_field (str.split_at semicolon_record ";" 0)))
(assert (= value_field (str.split_at semicolon_record ";" 1)))

; Key field must not be empty
(assert (> (str.len key_field) 0))

; Value field validation
(assert (>= (str.len value_field) 0))

; Get remaining data after first two fields
(declare-const extra_data String)
(assert (= extra_data (str.split_rest semicolon_record ";" 2)))

; Cross-format validation: ensure no delimiter mixing
(assert (not (str.contains tsv_record ",")))
(assert (not (str.contains csv_line "\t")))
(assert (not (str.contains pipe_data ";")))

(check-sat)
(exit)
(get-model)
