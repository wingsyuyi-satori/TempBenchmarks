(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with subdomain structure analysis
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components for user email
(declare-const user_local String)
(declare-const user_domain String)
(assert (= user_local (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components for backup email
(declare-const backup_local String)
(declare-const backup_domain String)
(assert (= backup_local (str.split_at backup_email "@" 0)))
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; User domain must have at least 3 segments (subdomain.domain.tld)
(assert (>= (str.num_splits user_domain ".") 3))

; Backup domain must have exactly 2 segments (domain.tld)
(assert (= (str.num_splits backup_domain ".") 2))

; ; Extract subdomain from user domain
(declare-const subdomain String)
(assert (= subdomain (str.split_at user_domain "." 0)))
(assert (>= (str.len subdomain) 3))

; ; Extract main domain from user domain
(declare-const main_domain String)
(assert (= main_domain (str.split_at user_domain "." 1)))
(assert (>= (str.len main_domain) 2))

; ; Extract TLD from user domain (everything after second dot)
(declare-const user_tld String)
(assert (= user_tld (str.split_rest user_domain "." 2)))

; ; Extract backup domain components
(declare-const backup_main String)
(declare-const backup_tld String)
(assert (= backup_main (str.split_at backup_domain "." 0)))
(assert (= backup_tld (str.split_at backup_domain "." 1)))

; Both local parts must be non-empty and have minimum length
(assert (>= (str.len user_local) 3))
(assert (>= (str.len backup_local) 3))

; TLD constraints
(assert (>= (str.len user_tld) 2))
(assert (>= (str.len backup_tld) 2))

; Domain names must be different
(assert (not (= user_domain backup_domain)))

; No consecutive dots allowed in domains
(assert (not (str.contains user_domain "..")))
(assert (not (str.contains backup_domain "..")))

; Local parts cannot start or end with dots
(assert (not (str.prefixof "." user_local)))
(assert (not (str.suffixof "." user_local)))
(assert (not (str.prefixof "." backup_local)))
(assert (not (str.suffixof "." backup_local)))

(check-sat)
(exit)
(get-model)
