(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV processing with different constraints
Target solver: CVC4, Z3, Z3str3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Declare variables for different delimited formats
(declare-const csv_data String)
(declare-const tsv_data String)
(declare-const pipe_data String)

; Common constraints for all formats
(assert (>= (str.len csv_data) 5))
(assert (>= (str.len tsv_data) 5))
(assert (>= (str.len pipe_data) 5))

; CSV-specific constraints (comma-delimited)
(assert (>= (str.num_splits csv_data ",") 4)) ; Must have at least 4 fields
(assert (not (str.contains (str.split_at csv_data "," 0) " "))) ; First field no spaces
(assert (str.contains (str.split_at csv_data "," 1) "@")) ; Second field must contain @

; TSV-specific constraints (tab-delimited)
(assert (= (str.num_splits tsv_data "\t") 3)) ; Exactly 3 fields
(assert (str.prefixof "ID:" (str.split_at tsv_data "\t" 0))) ; First field starts with ID:
(assert (<= (str.len (str.split_at tsv_data "\t" 2)) 20)) ; Third field max length 20

; Pipe-delimited constraints
(assert (>= (str.num_splits pipe_data "|") 2)) ; At least 2 fields
(assert (not (= (str.split_at pipe_data "|" 1) ""))) ; Second field not empty
(assert (str.suffixof ";" (str.split_at pipe_data "|" 0))) ; First field ends with ;

; Mixed format validation
(declare-const mixed_data String)
(assert (or
 (and (= (str.num_splits mixed_data ",") 3) (str.contains mixed_data "CSV"))
 (and (= (str.num_splits mixed_data "\t") 3) (str.contains mixed_data "TSV"))
 (and (= (str.num_splits mixed_data "|") 3) (str.contains mixed_data "PIPE"))
))

; Field content constraints
(assert (forall ((i Int))
 (=> (and (>= i 0) (< i (str.num_splits mixed_data ",")))
 (not (str.contains (str.split_at mixed_data "," i) """"))
)))

(check-sat)
(exit)
(get-model)
