(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Wei-Cheng Wu
Generated on: 2020-02-24
Generator: PyExZ3
Application: Concolic execution of Python code
Target solver: CVC4, Z3, Z3str3, Z3-Trau
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun s () String)

(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (not (= (ite (not (= (str.at s 2) (str.at s 3))) 1 0) 0))) (not (= (ite (not (= (str.at s 3) (str.at s 6))) 1 0) 0))) (not (= (ite (not (= (str.at s 3) (str.at s 5))) 1 0) 0))) (not (= (ite (not (= (str.at s 3) (str.at s 4))) 1 0) 0))) (not (= (ite (<= (str.len s) 7) 1 0) 0))) (not (= (ite (= (str.len s) 7) 1 0) 0))) (not (not (= (ite (not (= (str.at s 4) (str.at s 6))) 1 0) 0)))) (not (= (ite (not (= (str.at s 4) (str.at s 5))) 1 0) 0))) (not (= (ite (not (= (str.at s 5) (str.at s 6))) 1 0) 0))) (not (= (ite (<= (str.len s) 7) 1 0) 0))) (not (= (ite (= (str.len s) 7) 1 0) 0))) (not (not (= (ite (<= (str.len s) 6) 1 0) 0)))) (not (not (= (ite (= (str.len s) 6) 1 0) 0)))) (not (not (= (ite (<= (str.len s) 5) 1 0) 0)))) (not (not (= (ite (= (str.len s) 5) 1 0) 0)))) (not (not (= (ite (<= (str.len s) 4) 1 0) 0)))) (not (not (= (ite (= (str.len s) 4) 1 0) 0)))) (not (not (= (ite (<= (str.len s) 3) 1 0) 0)))) (not (not (= (ite (= (str.len s) 3) 1 0) 0)))) (not (not (= (ite (<= (str.len s) 2) 1 0) 0)))) (not (not (= (ite (= (str.len s) 2) 1 0) 0)))) (not (not (= (ite (<= (str.len s) 1) 1 0) 0)))) (not (not (= (ite (= (str.len s) 1) 1 0) 0)))) (not (not (= (ite (<= (str.len s) 0) 1 0) 0)))) (not (not (= (ite (= (str.len s) 0) 1 0) 0)))))

; --- LLM Generated Split Constraints ---
; Split the string s by delimiter "-"
(declare-const dash_count Int)
(assert (= dash_count (str.num_splits s "-")))
(assert (>= dash_count 3))
(declare-const partA String)
(declare-const partB String)
(declare-const partC_and_more String)
(assert (= partA (str.split_at s "-" 0)))
(assert (= partB (str.split_at s "-" 1)))
(assert (= partC_and_more (str.split_rest s "-" 2)))
; Now, split partC_and_more by delimiter "_"
(declare-const underscore_count Int)
(assert (= underscore_count (str.num_splits partC_and_more "_")))
(assert (>= underscore_count 2))
(declare-const partC String)
(declare-const partD String)
(assert (= partC (str.split_at partC_and_more "_" 0)))
(assert (= partD (str.split_rest partC_and_more "_" 1)))
; Cross-dependency: partA and partC must be different, but partB and partD must have the same length
(assert (not (= partA partC)))
(assert (= (str.len partB) (str.len partD)))
; Advanced validation: The concatenation of partA, "-", partB must not appear as a substring in partD
(declare-const concat_ab String)
(assert (= concat_ab (str.++ partA "-" partB)))
(assert (not (str.contains partD concat_ab)))
; Advanced: The sum of the lengths of all split parts must be less than the length of s due to delimiters
(assert (< (+ (str.len partA) (str.len partB) (str.len partC) (str.len partD)) (str.len s)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
