(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with subdomain structure analysis
(declare-const user_email String)
(declare-const admin_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits admin_email "@") 2))

; ; Extract components for user email
(declare-const user_local String)
(declare-const user_domain String)
(assert (= user_local (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components for admin email
(declare-const admin_local String)
(declare-const admin_domain String)
(assert (= admin_local (str.split_at admin_email "@" 0)))
(assert (= admin_domain (str.split_at admin_email "@" 1)))

; User domain must have subdomain structure (at least 3 segments)
(assert (>= (str.num_splits user_domain ".") 3))

; Admin domain must be simpler (exactly 2 segments)
(assert (= (str.num_splits admin_domain ".") 2))

; Get first subdomain of user domain
(declare-const user_subdomain String)
(assert (= user_subdomain (str.split_at user_domain "." 0)))
(assert (>= (str.len user_subdomain) 3))

; Get main domain part for user
(declare-const user_main_domain String)
(assert (= user_main_domain (str.split_at user_domain "." 1)))
(assert (>= (str.len user_main_domain) 2))

; Get TLD for user (remaining part after second dot)
(declare-const user_tld String)
(assert (= user_tld (str.split_rest user_domain "." 2)))
(assert (>= (str.len user_tld) 2))

; Admin domain components
(declare-const admin_main_domain String)
(declare-const admin_tld String)
(assert (= admin_main_domain (str.split_at admin_domain "." 0)))
(assert (= admin_tld (str.split_at admin_domain "." 1)))

; Both main domains must be non-empty and have minimum length
(assert (>= (str.len admin_main_domain) 4))
(assert (>= (str.len user_main_domain) 4))

; Local parts must be non-empty
(assert (> (str.len user_local) 0))
(assert (> (str.len admin_local) 0))

; ; Constraint: admin local part should be "admin" or "support"
(assert (or (= admin_local "admin") (= admin_local "support")))

; TLD constraints
(assert (or (= admin_tld "com") (= admin_tld "org") (= admin_tld "net")))
(assert (or (= user_tld "com") (= user_tld "edu") (= user_tld "gov")))

; Emails must be different
(assert (not (= user_email admin_email)))

(check-sat)
(exit)
(get-model)
