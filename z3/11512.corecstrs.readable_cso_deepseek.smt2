(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_468363 () String)
(assert (= T_1 (= var_0xINPUT_468363 "Type")))
(assert (= T_2 (not T_1)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Multi-delimiter splitting with nested constraints
(declare-const part1 String)
(declare-const part2 String)
(assert (= part1 (str.split_at var_0xINPUT_468363 "|" 0)))
(assert (= part2 (str.split_rest var_0xINPUT_468363 "|" 1)))
; First part must contain colon-delimited pair
(declare-const key String)
(declare-const value String)
(assert (= key (str.split_at part1 ":" 0)))
(assert (= value (str.split_rest part1 ":" 1)))
(assert (> (str.len key) 0))
(assert (> (str.len value) 0))
; Second part must contain slash-delimited segments
(declare-const seg1 String)
(declare-const seg2 String)
(assert (= seg1 (str.split_at part2 "/" 0)))
(assert (= seg2 (str.split_rest part2 "/" 1)))
(assert (str.contains seg1 key))
(assert (str.contains seg2 value))
; Cross-segment validation
(assert (not (= key value)))
(assert (> (str.len seg1) (str.len key)))
(assert (> (str.len seg2) (str.len value)))
; Final validation combining all parts
(assert (str.contains var_0xINPUT_468363 (str.++ key ":")))
(assert (str.contains var_0xINPUT_468363 (str.++ "/" value)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
