(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (re.* (re.++ (re.* (str.to_re "[[")) (str.to_re "zz")))))
(assert (= (str.len x) 6))
(assert (not (= x "[[zzzz")))
(assert (not (= x "zz[[zz")))
(assert (not (= x "[[[[zz")))

; --- LLM Generated Split Constraints ---
; Split x by delimiter "z"
(declare-const z_parts_count Int)
(assert (= z_parts_count (str.num_splits x "z")))
(assert (>= z_parts_count 2))
; Get first segment before any "z"
(declare-const first_z_seg String)
(assert (= first_z_seg (str.split_at x "z" 0)))
; Get rest after first "z"
(declare-const after_first_z String)
(assert (= after_first_z (str.split_rest x "z" 1)))
; Nested split: split first_z_seg by "["
(declare-const bracket_parts_count Int)
(assert (= bracket_parts_count (str.num_splits first_z_seg "[")))
; At least one opening bracket
(assert (>= bracket_parts_count 2))
(declare-const pre_bracket String)
(declare-const post_bracket String)
(assert (= pre_bracket (str.split_at first_z_seg "[" 0)))
(assert (= post_bracket (str.split_rest first_z_seg "[" 1)))
; Cross-dependency: post_bracket must be a prefix of y
(assert (str.prefixof post_bracket y))
; Advanced validation: enforce that the number of "z" splits is greater than or equal to the number of "[" splits
(assert (>= z_parts_count bracket_parts_count))
; Assert that pre_bracket is not empty and is not equal to "z"
(assert (not (= pre_bracket "")))
(assert (not (= pre_bracket "z")))
; Ensure after_first_z contains at least one "["
(assert (str.contains after_first_z "["))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
