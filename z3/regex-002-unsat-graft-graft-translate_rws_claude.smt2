(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with subdomain structure analysis
(declare-const user_email String)
(declare-const admin_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits admin_email "@") 2))

; ; Extract components for user email
(declare-const user_local String)
(declare-const user_domain String)
(assert (= user_local (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components for admin email
(declare-const admin_local String)
(declare-const admin_domain String)
(assert (= admin_local (str.split_at admin_email "@" 0)))
(assert (= admin_domain (str.split_at admin_email "@" 1)))

; User domain must have at least 3 segments (subdomain.domain.tld)
(assert (>= (str.num_splits user_domain ".") 3))

; Admin domain must have exactly 2 segments (domain.tld)
(assert (= (str.num_splits admin_domain ".") 2))

; ; Extract subdomain from user domain
(declare-const subdomain String)
(assert (= subdomain (str.split_at user_domain "." 0)))
(assert (>= (str.len subdomain) 3))

; ; Extract main domain from user domain
(declare-const user_main_domain String)
(assert (= user_main_domain (str.split_at user_domain "." 1)))

; ; Extract admin main domain
(declare-const admin_main_domain String)
(assert (= admin_main_domain (str.split_at admin_domain "." 0)))

; Both emails must share the same main domain
(assert (= user_main_domain admin_main_domain))

; Get TLD for both domains
(declare-const user_tld String)
(declare-const admin_tld String)
(assert (= user_tld (str.split_rest user_domain "." 2)))
(assert (= admin_tld (str.split_at admin_domain "." 1)))

; TLDs must match and be valid length
(assert (= user_tld admin_tld))
(assert (and (>= (str.len user_tld) 2) (<= (str.len user_tld) 6)))

; Local parts must be non-empty and different
(assert (> (str.len user_local) 0))
(assert (> (str.len admin_local) 0))
(assert (not (= user_local admin_local)))

; Admin local part must contain "admin"
(assert (str.contains admin_local "admin"))

; Neither email should contain consecutive dots
(assert (not (str.contains user_email "..")))
(assert (not (str.contains admin_email "..")))

(check-sat)
(exit)
(get-model)
