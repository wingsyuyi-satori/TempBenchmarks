(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with subdomain parsing
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components from user email
(declare-const username String)
(declare-const full_domain String)
(assert (= username (str.split_at user_email "@" 0)))
(assert (= full_domain (str.split_at user_email "@" 1)))

; Username constraints
(assert (>= (str.len username) 3))
(assert (<= (str.len username) 64))

; Domain must have at least 2 segments (name.tld minimum)
(declare-const domain_segments Int)
(assert (= domain_segments (str.num_splits full_domain ".")))
(assert (>= domain_segments 2))
(assert (<= domain_segments 5))

; ; Extract first domain segment and remaining parts
(declare-const primary_domain String)
(declare-const domain_suffix String)
(assert (= primary_domain (str.split_at full_domain "." 0)))
(assert (= domain_suffix (str.split_rest full_domain "." 1)))

; Primary domain must be non-empty and reasonable length
(assert (>= (str.len primary_domain) 2))
(assert (<= (str.len primary_domain) 63))

; Domain suffix must contain valid TLD structure
(assert (>= (str.len domain_suffix) 2))

; Backup email domain analysis
(declare-const backup_domain String)
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; ; Constraint: backup domain should have different structure
(declare-const backup_domain_count Int)
(assert (= backup_domain_count (str.num_splits backup_domain ".")))
(assert (not (= backup_domain_count domain_segments)))

; ; Security constraint: emails should not be identical
(assert (not (= user_email backup_email)))

; Format constraints: no consecutive dots in domains
(assert (not (str.contains full_domain "..")))
(assert (not (str.contains backup_domain "..")))

; Length constraints for full emails
(assert (>= (str.len user_email) 6))
(assert (<= (str.len user_email) 254))

(check-sat)
(get-model)
