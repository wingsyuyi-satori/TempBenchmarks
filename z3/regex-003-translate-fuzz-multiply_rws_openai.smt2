(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV field separation and validation (variant constraints)
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; CSV or TSV line (could be either format)
(declare-const line String)

; Choose delimiter: tab character for TSV
(define-fun delim () String "\t")

; There must be exactly 4 fields (i.e., 3 delimiters)
(assert (= (str.num_splits line delim) 4))

; ; Extract individual fields
(declare-const user String)
(declare-const age String)
(declare-const email String)
(declare-const address String)
(assert (= user (str.split_at line delim 0)))
(assert (= age (str.split_at line delim 1)))
(assert (= email (str.split_at line delim 2)))
(assert (= address (str.split_at line delim 3)))

; Field: user must not be empty nor contain any delimiter
(assert (> (str.len user) 0))
(assert (not (str.contains user delim)))

; Field: age must be a numeric string (for demonstration, just digits, no validation here)
(assert (> (str.len age) 0))
(assert (forall ((i Int))
 (=> (and (>= i 0) (< i (str.len age)))
 (and (>= (str.to_code (str.at age i)) 48) (<= (str.to_code (str.at age i)) 57))
)
))

; Field: email must contain '@'
(assert (str.contains email "@"))

; Field: address can be empty but must not contain tab (delim)
(assert (not (str.contains address delim)))

; Enforce at least one empty field in the line (unsatisfiable together with previous constraints)
(declare-const has_empty_field Bool)
(assert (= has_empty_field (or (= (str.len user) 0)
 (= (str.len age) 0)
 (= (str.len email) 0)
 (= (str.len address) 0))))
(assert has_empty_field)

(check-sat)
(get-model)
