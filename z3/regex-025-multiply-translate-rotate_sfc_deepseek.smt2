(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (re.* (re.++ (re.* (str.to_re "$$")) (str.to_re "}}")))))
(assert (str.in_re y (re.* (re.++ (re.* (str.to_re "$$")) (str.to_re "}}")))))
(assert (= (str.len x) (str.len y)))
(assert (not (= x y)))
(assert (= (str.len x) 14))

; --- LLM Generated Split Constraints ---
; Split x and y using "$$" delimiter
(declare-const x_split0 String)
(declare-const x_split1 String)
(assert (= x_split0 (str.split_at x "$$" 0)))
(assert (= x_split1 (str.split_at x "$$" 1)))
(assert (>= (str.num_splits x "$$") 2))
; Split y and verify segment counts match x
(declare-const y_split0 String)
(declare-const y_split1 String)
(assert (= y_split0 (str.split_at y "$$" 0)))
(assert (= y_split1 (str.split_at y "$$" 1)))
(assert (= (str.num_splits x "$$") (str.num_splits y "$$")))
; ; Validate split segments have non-zero length
(assert (> (str.len x_split0) 0))
(assert (> (str.len y_split0) 0))
; Verify remaining segments after first split
(assert (not (= (str.split_rest x "$$" 0) (str.split_rest y "$$" 0))))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
