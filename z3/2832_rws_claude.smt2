(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV processing with multiple delimiter support
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Multi-format data processing variables
(declare-const data_record String)
(declare-const tsv_record String)
(declare-const psv_record String)

; ; Field extraction variables
(declare-const name_field String)
(declare-const age_field String)
(declare-const email_field String)
(declare-const status_field String)

; TSV processing with tab delimiter
(assert (= (str.num_splits tsv_record "\t") 4))
(assert (= name_field (str.split_at tsv_record "\t" 0)))
(assert (= age_field (str.split_at tsv_record "\t" 1)))
(assert (= email_field (str.split_at tsv_record "\t" 2)))
(assert (= status_field (str.split_at tsv_record "\t" 3)))

; Pipe-separated values processing
(assert (>= (str.num_splits psv_record "|") 3))
(declare-const psv_field1 String)
(declare-const psv_field2 String)
(declare-const psv_remainder String)
(assert (= psv_field1 (str.split_at psv_record "|" 0)))
(assert (= psv_field2 (str.split_at psv_record "|" 1)))
(assert (= psv_remainder (str.split_rest psv_record "|" 2)))

; Empty field validation - name cannot be empty
(assert (not (= name_field "")))

; Age field must be numeric-like (contains only digits)
(assert (> (str.len age_field) 0))
(assert (<= (str.len age_field) 3))

; Email field validation - must contain @ symbol
(assert (str.contains email_field "@"))
(assert (> (str.indexof email_field "@" 0) 0))

; Status field enumeration constraint
(assert (or (= status_field "active") 
 (= status_field "inactive") 
 (= status_field "pending")))

; Semicolon-delimited alternative format
(declare-const alt_format String)
(assert (= (str.num_splits alt_format ";") 5))
(declare-const alt_id String)
(declare-const alt_data String)
(assert (= alt_id (str.split_at alt_format ";" 0)))
(assert (= alt_data (str.split_rest alt_format ";" 1)))

; Cross-format consistency - same name in different formats
(assert (= name_field (str.split_at alt_format ";" 1)))

; Escape sequence handling - no unescaped commas in TSV
(assert (not (str.contains tsv_record ",")))

; Field length constraints for data integrity
(assert (and (>= (str.len psv_field1) 1) (<= (str.len psv_field1) 50)))
(assert (>= (str.len psv_remainder) 0))

; No consecutive delimiters (empty fields between)
(assert (not (str.contains data_record ",,")))
(assert (not (str.contains tsv_record "\t\t")))

(check-sat)
(get-model)
