(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Wei-Cheng Wu
Generated on: 2020-02-24
Generator: PyExZ3
Application: Concolic execution of Python code
Target solver: CVC4, Z3, Z3str3, Z3-Trau
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun s2 () String)
(declare-fun s3 () String)
(declare-fun s1 () String)

(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (not (not (= (ite (= (str.at s2 2) (str.at s3 2)) 1 0) 0)))) (not (= (ite (> (str.len s2) 2) 1 0) 0))) (not (not (= (ite (> (str.len s1) 0) 1 0) 0)))) (not (not (= (ite (= (str.len s2) 2) 1 0) 0)))) (not (= (ite (= (str.len s1) 0) 1 0) 0))) (not (not (= (ite (= (str.len s1) (- 1)) 1 0) 0)))) (not (= (ite (= (str.at s2 1) (str.at s3 1)) 1 0) 0))) (not (= (ite (> (str.len s2) 1) 1 0) 0))) (not (not (= (ite (> (str.len s1) 0) 1 0) 0)))) (not (not (= (ite (= (str.len s2) 1) 1 0) 0)))) (not (= (ite (= (str.len s1) 0) 1 0) 0))) (not (not (= (ite (= (str.len s1) (- 1)) 1 0) 0)))) (not (= (ite (= (str.at s2 0) (str.at s3 0)) 1 0) 0))) (not (= (ite (> (str.len s2) 0) 1 0) 0))) (not (not (= (ite (> (str.len s1) 0) 1 0) 0)))) (not (not (= (ite (= (str.len s2) 0) 1 0) 0)))) (not (= (ite (= (str.len s1) 0) 1 0) 0))) (not (not (= (ite (not (= (+ (str.len s1) (str.len s2)) (str.len s3))) 1 0) 0)))))

; --- LLM Generated Split Constraints ---
; Split s3 by "," into at least 3 parts
(declare-const s3_comma_n Int)
(assert (>= s3_comma_n 3))
(assert (= s3_comma_n (str.num_splits s3 ",")))
(declare-const s3_part0 String)
(declare-const s3_part1 String)
(declare-const s3_part2 String)
(assert (= s3_part0 (str.split_at s3 "," 0)))
(assert (= s3_part1 (str.split_at s3 "," 1)))
(assert (= s3_part2 (str.split_at s3 "," 2)))
; Split s2 by "-" into 2 parts, and use its second part for further split by ":"
(declare-const s2_dash_n Int)
(assert (= s2_dash_n (str.num_splits s2 "-")))
(assert (= s2_dash_n 2))
(declare-const s2dash0 String)
(declare-const s2dash1 String)
(assert (= s2dash0 (str.split_at s2 "-" 0)))
(assert (= s2dash1 (str.split_at s2 "-" 1)))
(declare-const s2dash1_colon_n Int)
(assert (>= s2dash1_colon_n 2))
(assert (= s2dash1_colon_n (str.num_splits s2dash1 ":")))
(declare-const s2dash1_colon0 String)
(declare-const s2dash1_colon1 String)
(assert (= s2dash1_colon0 (str.split_at s2dash1 ":" 0)))
(assert (= s2dash1_colon1 (str.split_at s2dash1 ":" 1)))
; Cross dependencies: require s3_part1 = s2dash0 and s3_part2 â‰  s2dash1_colon0
(assert (= s3_part1 s2dash0))
(assert (not (= s3_part2 s2dash1_colon0)))
; Advanced validation: lengths and prefix/suffix constraints
(assert (> (str.len s3_part0) 1))
(assert (str.prefixof s2dash1_colon0 s1))
(assert (not (str.suffixof s2dash1_colon1 s1)))
(assert (< (str.len s2dash1_colon0) (str.len s2dash1_colon1)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
