(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (re.* (re.++ (re.* (str.to_re "$$")) (str.to_re "}}")))))
(assert (str.in_re y (re.* (re.++ (re.* (str.to_re "$$")) (str.to_re "}}")))))
(assert (= (str.len x) (str.len y)))
(assert (not (= x y)))
(assert (= (str.len x) 14))

; --- LLM Generated Split Constraints ---
; Multi-delimiter splitting with nested dependencies
(declare-const s String)
(assert (str.contains s "|"))
(assert (str.contains s ":"))
(assert (str.contains s ";"))
; First split by "|" into three parts
(assert (>= (str.num_splits s "|") 3))
(declare-const part1 String)
(declare-const part2 String)
(declare-const part3 String)
(assert (= part1 (str.split_at s "|" 0)))
(assert (= part2 (str.split_at (str.split_rest s "|" 1) "|" 0)))
(assert (= part3 (str.split_rest s "|" 2)))
; Split part2 by ":" with length constraints
(assert (>= (str.num_splits part2 ":") 2))
(declare-const key String)
(declare-const val String)
(assert (= key (str.split_at part2 ":" 0)))
(assert (= val (str.split_rest part2 ":" 1)))
(assert (>= (str.len key) 3))
(assert (str.prefixof "id_" key))
; Split part3 by ";" with cross-partition relationships
(assert (>= (str.num_splits part3 ";") 2))
(declare-const sub1 String)
(declare-const sub2 String)
(assert (= sub1 (str.split_at part3 ";" 0)))
(assert (= sub2 (str.split_rest part3 ";" 1)))
(assert (str.contains sub1 val)) ; sub1 must contain value from part2
; Advanced validation constraints
(assert (distinct part1 key sub2))
(assert (str.suffixof "END" part3))
(assert (= (str.len part1) (+ (str.len key) (str.len sub1))))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
