(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Wei-Cheng Wu
Generated on: 2020-02-24
Generator: PyExZ3
Application: Concolic execution of Python code
Target solver: CVC4, Z3, Z3str3, Z3-Trau
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun s2 () String)
(declare-fun s3 () String)
(declare-fun s1 () String)

(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (not (not (= (ite (= (str.at s2 2) (str.at s3 2)) 1 0) 0)))) (not (= (ite (> (str.len s2) 2) 1 0) 0))) (not (not (= (ite (> (str.len s1) 0) 1 0) 0)))) (not (not (= (ite (= (str.len s2) 2) 1 0) 0)))) (not (= (ite (= (str.len s1) 0) 1 0) 0))) (not (not (= (ite (= (str.len s1) (- 1)) 1 0) 0)))) (not (= (ite (= (str.at s2 1) (str.at s3 1)) 1 0) 0))) (not (= (ite (> (str.len s2) 1) 1 0) 0))) (not (not (= (ite (> (str.len s1) 0) 1 0) 0)))) (not (not (= (ite (= (str.len s2) 1) 1 0) 0)))) (not (= (ite (= (str.len s1) 0) 1 0) 0))) (not (not (= (ite (= (str.len s1) (- 1)) 1 0) 0)))) (not (= (ite (= (str.at s2 0) (str.at s3 0)) 1 0) 0))) (not (= (ite (> (str.len s2) 0) 1 0) 0))) (not (not (= (ite (> (str.len s1) 0) 1 0) 0)))) (not (not (= (ite (= (str.len s2) 0) 1 0) 0)))) (not (= (ite (= (str.len s1) 0) 1 0) 0))) (not (not (= (ite (not (= (+ (str.len s1) (str.len s2)) (str.len s3))) 1 0) 0)))))

; --- LLM Generated Split Constraints ---
(declare-fun s1_split_0 () String)
(declare-fun s1_split_1 () String)
(declare-fun s2_split_0 () String)
(declare-fun s2_split_1 () String)
(declare-fun s3_split_0 () String)
(declare-fun s3_split_1 () String)
; Split s1 on space delimiter
(assert (= s1_split_0 (str.split_at s1 " " 0)))
(assert (= s1_split_1 (str.split_at s1 " " 1)))
(assert (>= (str.num_splits s1 " ") 1))
; Split s2 on comma delimiter
(assert (= s2_split_0 (str.split_at s2 "," 0)))
(assert (= s2_split_1 (str.split_at s2 "," 1)))
(assert (>= (str.num_splits s2 ",") 1))
; Split s3 on underscore delimiter
(assert (= s3_split_0 (str.split_at s3 "_" 0)))
(assert (= s3_split_1 (str.split_at s3 "_" 1)))
(assert (>= (str.num_splits s3 "_") 1))
; Basic validation constraints
(assert (>= (str.len s1_split_0) 0))
(assert (>= (str.len s2_split_0) 0))
(assert (>= (str.len s3_split_0) 0))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
