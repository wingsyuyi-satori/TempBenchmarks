(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_4 () Bool)
(declare-fun var_0xINPUT_118656 () String)
(assert (= T_1 (= "-" var_0xINPUT_118656)))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (= "" var_0xINPUT_118656)))
(assert (= T_4 (not T_3)))
(assert T_4)

; --- LLM Generated Split Constraints ---
; Multi-delimiter splitting with nested dependencies
(declare-const part1 String)
(declare-const part2 String)
(declare-const part3 String)
(assert (= (str.num_splits var_0xINPUT_118656 ",") 2))
(assert (= part1 (str.split_at var_0xINPUT_118656 "," 0)))
(assert (= part2 (str.split_rest var_0xINPUT_118656 "," 1)))
; Split part2 further by ":"
(assert (>= (str.num_splits part2 ":") 2))
(declare-const subpart1 String)
(declare-const subpart2 String)
(assert (= subpart1 (str.split_at part2 ":" 0)))
(assert (= subpart2 (str.split_rest part2 ":" 1)))
; Cross-validation between splits
(assert (str.prefixof part1 subpart1))
(assert (str.suffixof subpart2 var_0xINPUT_118656))
; Length constraints with arithmetic
(assert (> (str.len part1) 5))
(assert (< (str.len subpart2) (+ (str.len part1) 10)))
; Content constraints
(assert (str.contains part1 "id="))
(assert (str.contains subpart2 "val="))
; Final validation combining all parts
(assert (not (= (str.++ part1 "," subpart1) subpart2)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
