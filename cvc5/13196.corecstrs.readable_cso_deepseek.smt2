(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_88630 () String)
(assert (= T_1 (= var_0xINPUT_88630 "")))
(assert (= T_2 (not T_1)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Multi-level splitting with cross-dependencies
(declare-const input String)
(assert (str.contains input "#"))
(assert (str.contains input ":"))
(assert (str.contains input ","))
; First split by "#" into header and body
(assert (>= (str.num_splits input "#") 2))
(declare-const header String)
(declare-const body String)
(assert (= header (str.split_at input "#" 0)))
(assert (= body (str.split_rest input "#" 1)))
; Split header into key-value pairs by ":"
(assert (>= (str.num_splits header ":") 2))
(declare-const header_key String)
(declare-const header_val String)
(assert (= header_key (str.split_at header ":" 0)))
(assert (= header_val (str.split_rest header ":" 1)))
; Split body into segments by ","
(assert (>= (str.num_splits body ",") 3))
(declare-const segment1 String)
(declare-const segment2 String)
(declare-const segment3 String)
(assert (= segment1 (str.split_at body "," 0)))
(assert (= segment2 (str.split_at (str.split_rest body "," 1) "," 0)))
(assert (= segment3 (str.split_rest body "," 2)))
; Cross-validation constraints
(assert (str.contains segment1 header_key))
(assert (not (= header_val segment2)))
(assert (str.prefixof "item_" segment3))
; Length relationships
(assert (> (str.len body) (str.len header)))
(assert (< (str.len segment1) (str.len segment2)))
(assert (> (str.len segment3) (+ (str.len header_key) (str.len header_val))))
; Nested split operations
(assert (str.contains segment2 "="))
(declare-const subkey String)
(declare-const subval String)
(assert (= subkey (str.split_at segment2 "=" 0)))
(assert (= subval (str.split_rest segment2 "=" 1)))
(assert (str.contains segment3 subkey))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
