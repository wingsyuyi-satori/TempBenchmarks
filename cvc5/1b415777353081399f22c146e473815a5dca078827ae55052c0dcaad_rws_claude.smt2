(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Multi-format CSV/TSV validation scenario
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Input data records with different delimiters
(declare-const tsv_record String)
(declare-const pipe_record String)
(declare-const semicolon_record String)

; TSV processing - tab-separated values
(declare-const tsv_name String)
(declare-const tsv_age String)
(declare-const tsv_email String)
(declare-const tsv_department String)
(assert (= tsv_name (str.split_at tsv_record "\t" 0)))
(assert (= tsv_age (str.split_at tsv_record "\t" 1)))
(assert (= tsv_email (str.split_at tsv_record "\t" 2)))
(assert (= tsv_department (str.split_at tsv_record "\t" 3)))

; TSV must have exactly 4 fields
(assert (= (str.num_splits tsv_record "\t") 4))

; Pipe-delimited processing
(declare-const pipe_product String)
(declare-const pipe_price String)
(declare-const pipe_category String)
(assert (= pipe_product (str.split_at pipe_record "|" 0)))
(assert (= pipe_price (str.split_at pipe_record "|" 1)))
(assert (= pipe_category (str.split_at pipe_record "|" 2)))

; Pipe record must have at least 3 fields
(assert (>= (str.num_splits pipe_record "|") 3))

; Semicolon-delimited processing
(declare-const semi_country String)
(declare-const semi_city String)
(declare-const semi_postal String)
(assert (= semi_country (str.split_at semicolon_record ";" 0)))
(assert (= semi_city (str.split_at semicolon_record ";" 1)))
(assert (= semi_postal (str.split_at semicolon_record ";" 2)))

; Field validation constraints
; Name field cannot be empty and must not contain tabs
(assert (> (str.len tsv_name) 0))
(assert (not (str.contains tsv_name "\t")))

; Age field must be non-empty (assuming numeric validation elsewhere)
(assert (> (str.len tsv_age) 0))

; Email field must contain @ symbol and be non-empty
(assert (> (str.len tsv_email) 0))
(assert (str.contains tsv_email "@"))

; Product name cannot be empty or contain pipe characters
(assert (> (str.len pipe_product) 0))
(assert (not (str.contains pipe_product "|")))

; Price field handling - allow empty for missing prices
(assert (not (str.contains pipe_price "|")))

; Country field must be non-empty
(assert (> (str.len semi_country) 0))
(assert (not (str.contains semi_country ";")))

; City can be empty but postal code cannot contain semicolons
(assert (not (str.contains semi_postal ";")))

; ; Cross-format consistency check
; If we have remaining data after required fields, ensure proper structure
(declare-const tsv_extra String)
(declare-const pipe_extra String)
(assert (= tsv_extra (str.split_rest tsv_record "\t" 4)))
(assert (= pipe_extra (str.split_rest pipe_record "|" 3)))

; Extra fields should not contain their respective delimiters
(assert (not (str.contains tsv_extra "\t")))
(assert (not (str.contains pipe_extra "|")))

; Escape sequence handling - ensure no unescaped quotes in critical fields
(assert (not (str.contains tsv_email """")))
(assert (not (str.contains pipe_product """")))

(check-sat)
(exit)
(get-model)
