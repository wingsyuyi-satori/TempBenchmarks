(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (re.* (str.to_re "vvVVLLww"))))
(assert (str.in_re x (re.* (str.to_re "vvVVLLwwvvVVLLww"))))
(assert (> (str.len x) 40))
(assert (< (str.len x) 50))

; --- LLM Generated Split Constraints ---
; Split x on "VV" delimiter and verify basic properties
(assert (= (str.num_splits x "VV") 3)) ; Expect multiple occurrences of "VV"
(assert (> (str.len (str.split_at x "VV" 0)) 0)) ; First segment should exist
(assert (> (str.len (str.split_at x "VV" 1)) 0)) ; Second segment should exist
(assert (str.contains (str.split_rest x "VV" 1) "LL")) ; Remaining segments should contain "LL"
; Additional split on "ww" with small indices
(assert (>= (str.num_splits x "ww") 2)) ; At least two "ww" delimiters
(assert (< (str.len (str.split_at x "ww" 0)) 30)) ; First segment length check
(assert (str.prefixof "vv" (str.split_at x "ww" 0))) ; First segment starts with "vv"
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
