(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun var_0xINPUT_142378 () String)
(assert (= T_1 (not (= "" var_0xINPUT_142378))))
(assert T_1)
(assert (= T_2 (not (= "" var_0xINPUT_142378))))
(assert T_2)
(assert (= T_3 (= var_0xINPUT_142378 "Example:")))
(assert T_3)

; --- LLM Generated Split Constraints ---
; Multiple partitions: split var_0xINPUT_142378 by ":" (colon) and by "-" (dash)
(declare-const parts_colon_count Int)
(declare-const parts_dash_count Int)
(assert (= parts_colon_count (str.num_splits var_0xINPUT_142378 ":")))
(assert (= parts_dash_count (str.num_splits var_0xINPUT_142378 "-")))
; Require at least two segments for colon, and at least one for dash
(assert (>= parts_colon_count 2))
(assert (>= parts_dash_count 1))
; ; Extract first and second segments from colon split
(declare-const colon_first String)
(declare-const colon_second String)
(assert (= colon_first (str.split_at var_0xINPUT_142378 ":" 0)))
(assert (= colon_second (str.split_at var_0xINPUT_142378 ":" 1)))
; Nested split: split the second colon segment by "-" (dash)
(declare-const dash_in_second Int)
(assert (= dash_in_second (str.num_splits colon_second "-")))
(assert (>= dash_in_second 1))
(declare-const dash_nested_first String)
(assert (= dash_nested_first (str.split_at colon_second "-" 0)))
; Cross-dependency: require that first part of colon split is a prefix of the dash-nested first segment
(assert (str.prefixof colon_first dash_nested_first))
; Advanced validation: lengths and containment
(assert (> (str.len colon_second) (str.len colon_first)))
(assert (not (str.contains colon_first "-")))
; Enforce that dash_nested_first is not equal to colon_first and is not empty
(assert (not (= dash_nested_first colon_first)))
(assert (not (= dash_nested_first "")))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
