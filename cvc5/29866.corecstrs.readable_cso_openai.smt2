(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Int)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun var_0xINPUT_355061 () String)
(assert (= T_1 (str.len var_0xINPUT_355061)))
(assert (= T_2 (= T_1 0)))
(assert (= T_3 (not T_2)))
(assert T_3)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_355061 by ":" and compute number of segments
(declare-fun n_colon () Int)
(assert (= n_colon (str.num_splits var_0xINPUT_355061 ":")))
(assert (>= n_colon 3))
; ; Extract first part and the rest after first colon
(declare-fun seg0 () String)
(declare-fun rest1 () String)
(assert (= seg0 (str.split_at var_0xINPUT_355061 ":" 0)))
(assert (= rest1 (str.split_rest var_0xINPUT_355061 ":" 1)))
; Split rest1 by "," and compute number of segments
(declare-fun n_comma () Int)
(assert (= n_comma (str.num_splits rest1 ",")))
(assert (>= n_comma 2))
; ; Extract first segment from comma split and the rest
(declare-fun seg1 () String)
(declare-fun rest2 () String)
(assert (= seg1 (str.split_at rest1 "," 0)))
(assert (= rest2 (str.split_rest rest1 "," 1)))
; Nested split: split seg1 by ";" (semicolon delimiter)
(declare-fun n_semi () Int)
(assert (= n_semi (str.num_splits seg1 ";")))
(assert (> n_semi 1))
(declare-fun subsegA () String)
(declare-fun subsegB () String)
(assert (= subsegA (str.split_at seg1 ";" 0)))
(assert (= subsegB (str.split_rest seg1 ";" 1)))
; Cross-dependency: require subsegA to occur in rest2
(assert (str.contains rest2 subsegA))
; Advanced validation: seg0 and subsegB must have same length
(assert (= (str.len seg0) (str.len subsegB)))
; Cross-partition validation: seg0 must not equal any segment from rest2 split by "|"
(declare-fun n_pipe () Int)
(assert (= n_pipe (str.num_splits rest2 "|")))
(assert (>= n_pipe 1))
(declare-fun pipe_seg0 () String)
(assert (= pipe_seg0 (str.split_at rest2 "|" 0)))
(assert (not (= seg0 pipe_seg0)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
