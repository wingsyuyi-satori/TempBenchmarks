(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Int)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun var_0xINPUT_355061 () String)
(assert (= T_1 (str.len var_0xINPUT_355061)))
(assert (= T_2 (= T_1 0)))
(assert (= T_3 (not T_2)))
(assert T_3)

; --- LLM Generated Split Constraints ---
; Multi-delimiter hierarchical splitting with cross-dependencies
(declare-const partA String)
(declare-const partB String)
(assert (= partA (str.substr var_0xINPUT_355061 0 (str.indexof var_0xINPUT_355061 "|" 0))))
(assert (= partB (str.substr var_0xINPUT_355061 (+ (str.indexof var_0xINPUT_355061 "|" 0) 1) (- T_1 (+ (str.indexof var_0xINPUT_355061 "|" 0) 1)))))
; ; Validate partA contains exactly 3 comma-separated segments
(assert (= (str.num_splits partA ",") 3))
(declare-const partA1 String)
(declare-const partA2 String)
(declare-const partA3 String)
(assert (= partA1 (str.substr partA 0 (str.indexof partA "," 0))))
(assert (= partA2 (str.substr partA (+ (str.indexof partA "," 0) 1) (- (str.indexof partA "," (+ (str.indexof partA "," 0) 1)) (+ (str.indexof partA "," 0) 1)))))
(assert (= partA3 (str.substr partA (+ (str.indexof partA "," (+ (str.indexof partA "," 0) 1)) 1) (- (str.len partA) (+ (str.indexof partA "," (+ (str.indexof partA "," 0) 1)) 1)))))
; Complex constraints between segments
(assert (str.prefixof partA1 partB))
(assert (str.suffixof partA3 partB))
(assert (not (str.contains partA2 "_")))
; Nested validation for partB
(assert (>= (str.num_splits partB ":") 2))
(declare-const partB1 String)
(declare-const partB2 String)
(assert (= partB1 (str.substr partB 0 (str.indexof partB ":" 0))))
(assert (= partB2 (str.substr partB (+ (str.indexof partB ":" 0) 1) (- (str.len partB) (+ (str.indexof partB ":" 0) 1)))))
; Cross-partition arithmetic constraint
(assert (> (str.len partB2) (+ (str.len partA1) (str.len partA3))))
; Final validation combining all parts
(assert (str.contains (str.++ partA2 partB1) "id="))
(assert (<= (str.to_int partA1) 1000))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
