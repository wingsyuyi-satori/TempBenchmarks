(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation scenario variant
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with stricter constraints
(declare-const email_addr String)


; Split into local and domain parts
(declare-const local String)
(declare-const domain String)
(assert (= local (str.split_at email_addr "@" 0)))
(assert (= domain (str.split_at email_addr "@" 1)))

; Local part constraints
(assert (>= (str.len local) 1)) ; Minimum length 1
(assert (<= (str.len local) 64)) ; Maximum length 64
(assert (not (str.contains local ".."))) ; No consecutive dots

; Domain part must have at least one dot
(assert (str.contains domain "."))

; Split domain into subdomains
(declare-const subdomain_count Int)
(assert (= subdomain_count (str.num_splits domain ".")))

; Domain must have between 2 and 4 segments
(assert (>= subdomain_count 2))
(assert (<= subdomain_count 4))

; Each domain segment must be non-empty and alphanumeric
(declare-const domain_seg1 String)
(declare-const domain_seg2 String)
(assert (= domain_seg1 (str.split_at domain "." 0)))
(assert (= domain_seg2 (str.split_at domain "." 1)))
(assert (str.is_digit domain_seg1)) ; First segment must be numeric

; TLD must be 2-6 characters
(declare-const tld String)
(assert (= tld (str.split_at domain "." (- subdomain_count 1))))
(assert (>= (str.len tld) 2))
(assert (<= (str.len tld) 6))

; Email must end with .com or .org
(assert (or 
 (str.suffixof ".com" email_addr)
 (str.suffixof ".org" email_addr)
))

(check-sat)
(get-model)
