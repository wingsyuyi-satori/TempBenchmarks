(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV field separation and validation (alternate constraints)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Declare input line which may be in CSV, TSV, or pipe format
(declare-const input_line String)

; Use tab as delimiter for TSV processing
(declare-const tsv_field_count Int)
(assert (= tsv_field_count (str.num_splits input_line "\t")))

; There must be exactly 5 fields if TSV is used
(assert (or (= tsv_field_count 1) (= tsv_field_count 5)))

; ; Extract fields from a semicolon-delimited CSV
(declare-const field_a String)
(declare-const field_b String)
(declare-const field_c String)
(assert (= field_a (str.split_at input_line ";" 0)))
(assert (= field_b (str.split_at input_line ";" 1)))
(assert (= field_c (str.split_at input_line ";" 2)))

; At least one of the first three fields must be empty (testing empty field handling)
(assert (or (= field_a "") (= field_b "") (= field_c "")))

; For pipe-separated format, ensure there are at most 7 fields
(assert (<= (str.num_splits input_line "|") 7))

; For comma-separated CSV, the third field must not contain the delimiter character ','
(declare-const csv_field3 String)
(assert (= csv_field3 (str.split_at input_line "," 2)))
(assert (not (str.contains csv_field3 ",")))

; ; Unsatisfiable constraint: input_line cannot be both a single field and five fields for TSV
(assert (not (and (= (str.num_splits input_line "\t") 1) (= (str.num_splits input_line "\t") 5))))

(check-sat)
(get-model)
