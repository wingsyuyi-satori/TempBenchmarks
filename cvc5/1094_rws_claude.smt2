(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with domain hierarchy analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with detailed domain structure analysis
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have valid @ structure
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components from user email
(declare-const user_local String)
(declare-const user_domain String)
(assert (= user_local (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components from backup email
(declare-const backup_local String)
(declare-const backup_domain String)
(assert (= backup_local (str.split_at backup_email "@" 0)))
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; Domain structure validation - must have at least 2 segments
(assert (>= (str.num_splits user_domain ".") 2))
(assert (>= (str.num_splits backup_domain ".") 2))

; Get first domain segment (subdomain or domain name)
(declare-const user_first_domain String)
(declare-const backup_first_domain String)
(assert (= user_first_domain (str.split_at user_domain "." 0)))
(assert (= backup_first_domain (str.split_at backup_domain "." 0)))

; Get remaining domain parts (everything after first dot)
(declare-const user_remaining_domain String)
(declare-const backup_remaining_domain String)
(assert (= user_remaining_domain (str.split_rest user_domain "." 1)))
(assert (= backup_remaining_domain (str.split_rest backup_domain "." 1)))

; All segments must be non-empty
(assert (> (str.len user_local) 0))
(assert (> (str.len backup_local) 0))
(assert (> (str.len user_first_domain) 0))
(assert (> (str.len backup_first_domain) 0))
(assert (> (str.len user_remaining_domain) 0))
(assert (> (str.len backup_remaining_domain) 0))

; ; Constraint: emails must be from same organization (same remaining domain)
(assert (= user_remaining_domain backup_remaining_domain))

; ; Constraint: local parts must be different
(assert (not (= user_local backup_local)))

; Domain validation: no consecutive dots
(assert (not (str.contains user_domain "..")))
(assert (not (str.contains backup_domain "..")))

; ; Additional constraint: user domain must have more segments than backup
(assert (> (str.num_splits user_domain ".") (str.num_splits backup_domain ".")))

(check-sat)
(get-model)
