(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with subdomain structure analysis
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have valid @ structure
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components for primary email
(declare-const username String)
(declare-const primary_domain String)
(assert (= username (str.split_at user_email "@" 0)))
(assert (= primary_domain (str.split_at user_email "@" 1)))

; ; Extract components for backup email
(declare-const backup_user String)
(declare-const backup_domain String)
(assert (= backup_user (str.split_at backup_email "@" 0)))
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; Username constraints
(assert (>= (str.len username) 3))
(assert (<= (str.len username) 20))
(assert (>= (str.len backup_user) 1))

; Primary domain must have at least 3 segments (subdomain.domain.tld)
(assert (>= (str.num_splits primary_domain ".") 3))

; Backup domain must have at least 2 segments (domain.tld)
(assert (>= (str.num_splits backup_domain ".") 2))

; ; Extract subdomain from primary domain
(declare-const subdomain String)
(assert (= subdomain (str.split_at primary_domain "." 0)))
(assert (> (str.len subdomain) 0))

; ; Extract main domain from primary
(declare-const main_domain String)
(assert (= main_domain (str.split_at primary_domain "." 1)))
(assert (>= (str.len main_domain) 2))

; ; Extract TLD from backup domain
(declare-const backup_tld String)
(declare-const backup_domain_segments Int)
(assert (= backup_domain_segments (str.num_splits backup_domain ".")))
(assert (= backup_tld (str.split_at backup_domain "." (- backup_domain_segments 1))))
(assert (>= (str.len backup_tld) 2))
(assert (<= (str.len backup_tld) 4))

; Domain validation: no consecutive dots
(assert (not (str.contains primary_domain "..")))
(assert (not (str.contains backup_domain "..")))

; Emails must be different
(assert (not (= user_email backup_email)))

; Username cannot contain special characters
(assert (not (str.contains username ".")))
(assert (not (str.contains username "+")))

(check-sat)
(get-model)
