(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_110142 () String)
(assert (= T_1 (= var_0xINPUT_110142 "Type")))
(assert (= T_2 (not T_1)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_110142 by "-" and then by ":"
(declare-const dash_count Int)
(assert (= dash_count (str.num_splits var_0xINPUT_110142 "-")))
(assert (>= dash_count 2))
; Get the first two parts around "-"
(declare-const dash_first String)
(declare-const dash_second_rest String)
(assert (= dash_first (str.split_at var_0xINPUT_110142 "-" 0)))
(assert (= dash_second_rest (str.split_rest var_0xINPUT_110142 "-" 1)))
; Split dash_second_rest by ":"
(declare-const colon_count Int)
(assert (= colon_count (str.num_splits dash_second_rest ":")))
(assert (>= colon_count 2))
(declare-const colon_first String)
(declare-const colon_second_rest String)
(assert (= colon_first (str.split_at dash_second_rest ":" 0)))
(assert (= colon_second_rest (str.split_rest dash_second_rest ":" 1)))
; Nested split: Split colon_second_rest by "_"
(declare-const under_count Int)
(assert (= under_count (str.num_splits colon_second_rest "_")))
(assert (>= under_count 2))
(declare-const under_first String)
(declare-const under_second String)
(assert (= under_first (str.split_at colon_second_rest "_" 0)))
(assert (= under_second (str.split_at colon_second_rest "_" 1)))
; Cross-dependency: under_first must be a prefix of dash_first
(assert (str.prefixof under_first dash_first))
; Advanced validation: dash_first ≠ colon_first, under_second ≠ "Type"
(assert (not (= dash_first colon_first)))
(assert (not (= under_second "Type")))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
