(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_5 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun T0_5 () String)
(declare-fun T1_5 () String)
(declare-fun T2_5 () String)
(declare-fun T3_5 () String)
(declare-fun T4_5 () String)
(declare-fun T5_5 () String)
(declare-fun T_1 () Bool)
(declare-fun T_10 () Bool)
(declare-fun T_11 () String)
(declare-fun T_12 () Bool)
(declare-fun T_13 () Bool)
(declare-fun T_14 () String)
(declare-fun T_15 () Bool)
(declare-fun T_16 () String)
(declare-fun T_17 () Bool)
(declare-fun T_18 () String)
(declare-fun T_19 () Bool)
(declare-fun T_1a () String)
(declare-fun T_1b () Bool)
(declare-fun T_1c () String)
(declare-fun T_1d () Bool)
(declare-fun T_1e () String)
(declare-fun T_1f () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_5 () Bool)
(declare-fun T_6 () Bool)
(declare-fun T_7 () String)
(declare-fun T_8 () Bool)
(declare-fun T_9 () String)
(declare-fun T_SELECT_1 () Bool)
(declare-fun T_a () Bool)
(declare-fun T_b () String)
(declare-fun T_c () Bool)
(declare-fun T_d () String)
(declare-fun T_e () Bool)
(declare-fun T_f () String)
(declare-fun var_0xINPUT_96392 () String)
(assert (= T_1 (= "-" var_0xINPUT_96392)))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (= "" var_0xINPUT_96392)))
(assert T_3)
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_5 0)) (= var_0xINPUT_96392 (str.++ T0_5 T1_5)) (= I0_5 (str.len T4_5)) (= 0 (str.len T0_5)) (= T1_5 (str.++ T2_5 T3_5)) (= T2_5 (str.++ T4_5 T5_5)) (= T5_5 "__utmz=16886264.") (not (str.in_re T4_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "z") (str.to_re "=") (str.to_re "1") (str.to_re "6") (str.to_re "8") (str.to_re "8") (str.to_re "6") (str.to_re "2") (str.to_re "6") (str.to_re "4") (str.to_re "."))))) (and (= PCTEMP_LHS_1 (- 1)) (= var_0xINPUT_96392 (str.++ T0_5 T1_5)) (= 0 (str.len T0_5)) (not (str.in_re T1_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "z") (str.to_re "=") (str.to_re "1") (str.to_re "6") (str.to_re "8") (str.to_re "8") (str.to_re "6") (str.to_re "2") (str.to_re "6") (str.to_re "4") (str.to_re ".")))))))
(assert (= T_5 (< (- 1) PCTEMP_LHS_1)))
(assert (= T_6 (not T_5)))
(assert T_6)
(assert (= T_8 (= "-" T_7)))
(assert T_8)
(assert (= T_a (= "-" T_9)))
(assert T_a)
(assert (= T_c (= "-" T_b)))
(assert T_c)
(assert (= T_e (= "-" T_d)))
(assert T_e)
(assert (= T_10 (= "-" T_f)))
(assert T_10)
(assert (= T_12 (= "-" T_11)))
(assert (= T_13 (not T_12)))
(assert T_13)
(assert (= T_15 (= "-" T_14)))
(assert T_15)
(assert (= T_17 (= "-" T_16)))
(assert T_17)
(assert (= T_19 (= "-" T_18)))
(assert T_19)
(assert (= T_1b (= "-" T_1a)))
(assert T_1b)
(assert (= T_1d (= "-" T_1c)))
(assert T_1d)
(assert (= T_1f (= "-" T_1e)))
(assert T_1f)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_96392 by ";" into at least 3 partitions: seg0, seg1, seg2plus
(declare-const seg0 String)
(declare-const seg1 String)
(declare-const seg2plus String)
(declare-const semi_count Int)
(assert (= semi_count (str.num_splits var_0xINPUT_96392 ";")))
(assert (>= semi_count 3))
(assert (= seg0 (str.split_at var_0xINPUT_96392 ";" 0)))
(assert (= seg1 (str.split_at (str.split_rest var_0xINPUT_96392 ";" 1) ";" 0)))
(assert (= seg2plus (str.split_rest (str.split_rest var_0xINPUT_96392 ";" 1) ";" 1)))
; Now split seg0 and seg1 by "=" and enforce cross-segment dependencies
(declare-const s0_key String)
(declare-const s0_val String)
(declare-const s1_key String)
(declare-const s1_val String)
(assert (= s0_key (str.split_at seg0 "=" 0)))
(assert (= s0_val (str.split_rest seg0 "=" 1)))
(assert (= s1_key (str.split_at seg1 "=" 0)))
(assert (= s1_val (str.split_rest seg1 "=" 1)))
; Nested split: split s1_val by "," and compare to s0_val
(declare-const s1_val_first String)
(declare-const s1_val_rest String)
(assert (= s1_val_first (str.split_at s1_val "," 0)))
(assert (= s1_val_rest (str.split_rest s1_val "," 1)))
; Advanced validation: keys must not be equal, but s0_val must be a prefix of s1_val_first
(assert (not (= s0_key s1_key)))
(assert (str.prefixof s0_val s1_val_first))
; seg2plus must contain at least one "_" and split first part must not be equal to s0_key
(assert (str.contains seg2plus "_"))
(declare-const seg2plus_first String)
(assert (= seg2plus_first (str.split_at seg2plus "_" 0)))
(assert (not (= seg2plus_first s0_key)))
; Cross-dependency: Length of s1_val_rest must be greater than s0_val
(assert (> (str.len s1_val_rest) (str.len s0_val)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
