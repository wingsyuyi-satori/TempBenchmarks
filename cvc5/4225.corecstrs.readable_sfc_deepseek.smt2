(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun var_0xINPUT_142378 () String)
(assert (= T_1 (not (= "" var_0xINPUT_142378))))
(assert T_1)
(assert (= T_2 (not (= "" var_0xINPUT_142378))))
(assert T_2)
(assert (= T_3 (= var_0xINPUT_142378 "Example:")))
(assert T_3)

; --- LLM Generated Split Constraints ---
(declare-fun split_part_0 () String)
(declare-fun split_part_1 () String)
(declare-fun split_count () Int)
; Split on colon character
(assert (= split_part_0 (str.split_at var_0xINPUT_142378 ":" 0)))
(assert (= split_part_1 (str.split_at var_0xINPUT_142378 ":" 1)))
; Basic validation of split parts
(assert (> (str.len split_part_0) 0))
(assert (>= (str.len split_part_1) 0)) ; Second part may be empty
; ; Count number of splits (should be 2 for "Example:")
(assert (= split_count (str.num_splits var_0xINPUT_142378 ":")))
(assert (<= split_count 2))
; ; Example constraint using split_rest
(assert (str.contains (str.split_rest var_0xINPUT_142378 ":" 0) "Example"))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
