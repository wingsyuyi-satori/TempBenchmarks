(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_158702 () String)
(assert (= T_1 (= var_0xINPUT_158702 "")))
(assert (= T_2 (not T_1)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Split input by comma
(declare-const parts_count Int)
(assert (= parts_count (str.num_splits var_0xINPUT_158702 ",")))
(assert (>= parts_count 3))
; ; Extract first and second segments after comma split
(declare-const seg1 String)
(declare-const seg2 String)
(declare-const tail String)
(assert (= seg1 (str.split_at var_0xINPUT_158702 "," 0)))
(assert (= seg2 (str.split_at var_0xINPUT_158702 "," 1)))
(assert (= tail (str.split_rest var_0xINPUT_158702 "," 2)))
; Further split seg2 by "-"
(declare-const seg2_sub1 String)
(declare-const seg2_sub2 String)
(assert (= seg2_sub1 (str.split_at seg2 "-" 0)))
(assert (= seg2_sub2 (str.split_rest seg2 "-" 1)))
; Cross-dependency: seg2_sub1 must be a prefix of seg1
(assert (str.prefixof seg2_sub1 seg1))
; Cross-dependency: seg2_sub2 must be present in tail
(assert (str.contains tail seg2_sub2))
; Validation: the tail must not contain the first segment
(assert (not (str.contains tail seg1)))
; ; Advanced constraint: seg2 must not equal seg1 and seg2_sub2 must not equal seg2_sub1
(assert (distinct seg2 seg1))
(assert (distinct seg2_sub2 seg2_sub1))
; Ensure all segments are non-empty
(assert (> (str.len seg1) 0))
(assert (> (str.len seg2) 0))
(assert (> (str.len seg2_sub1) 0))
(assert (> (str.len seg2_sub2) 0))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
