(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_4 () Bool)
(declare-fun var_0xINPUT_99606 () String)
(assert (= T_1 (not (= "" var_0xINPUT_99606))))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (not (= "" var_0xINPUT_99606))))
(assert (= T_4 (not T_3)))
(assert T_4)

; --- LLM Generated Split Constraints ---
(declare-fun input_first () String)
(declare-fun input_second () String)
(declare-fun input_rest () String)
(assert (= input_first (str.split_at var_0xINPUT_99606 " " 0)))
(assert (= input_second (str.split_at var_0xINPUT_99606 " " 1)))
(assert (= input_rest (str.split_rest var_0xINPUT_99606 " " 1)))
(assert (>= (str.num_splits var_0xINPUT_99606 " ") 1))
(assert (<= (str.num_splits var_0xINPUT_99606 " ") 3))
; Basic validation that split operations are consistent with empty string constraints
(assert (=> (= var_0xINPUT_99606 "") (= (str.num_splits var_0xINPUT_99606 " ") 1)))
(assert (=> (= var_0xINPUT_99606 "") (= input_first "")))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
