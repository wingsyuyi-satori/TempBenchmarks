(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with detailed domain structure analysis
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components for primary email
(declare-const username String)
(declare-const full_domain String)
(assert (= username (str.split_at user_email "@" 0)))
(assert (= full_domain (str.split_at user_email "@" 1)))

; Username constraints
(assert (and (>= (str.len username) 1) (<= (str.len username) 64)))
(assert (not (str.prefixof "." username)))
(assert (not (str.suffixof "." username)))

; Domain must have at least 2 segments (name.tld minimum)
(declare-const domain_segments Int)
(assert (= domain_segments (str.num_splits full_domain ".")))
(assert (>= domain_segments 2))

; ; Extract domain components
(declare-const subdomain String)
(declare-const main_domain String)
(declare-const top_level_domain String)

; For domains with exactly 2 segments
(assert (=> (= domain_segments 2)
 (and (= main_domain (str.split_at full_domain "." 0))
 (= top_level_domain (str.split_at full_domain "." 1))
 (= subdomain ""))))

; For domains with 3 or more segments
(assert (=> (>= domain_segments 3)
 (and (= subdomain (str.split_at full_domain "." 0))
 (= main_domain (str.split_at full_domain "." 1))
 (> (str.len subdomain) 0))))

; All domain segments must be non-empty
(assert (> (str.len main_domain) 0))
(assert (> (str.len top_level_domain) 0))

; TLD must be at least 2 characters
(assert (>= (str.len top_level_domain) 2))

; Backup email domain analysis
(declare-const backup_domain String)
(declare-const backup_tld String)
(assert (= backup_domain (str.split_at backup_email "@" 1)))
(assert (= backup_tld (str.split_at backup_domain "." (- (str.num_splits backup_domain ".") 1))))

; Different domains constraint
(assert (not (= full_domain backup_domain)))

; Both emails must not contain consecutive dots
(assert (not (str.contains user_email "..")))
(assert (not (str.contains backup_email "..")))

; Length constraints
(assert (<= (str.len user_email) 320))
(assert (<= (str.len backup_email) 320))

(check-sat)
(exit)
(get-model)
