(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with subdomain structure analysis
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components for user_email
(declare-const user_local String)
(declare-const user_domain String)
(assert (= user_local (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components for backup_email
(declare-const backup_local String)
(declare-const backup_domain String)
(assert (= backup_local (str.split_at backup_email "@" 0)))
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; User local part must be at least 3 characters
(assert (>= (str.len user_local) 3))

; Backup local part must be at least 2 characters
(assert (>= (str.len backup_local) 2))

; Domain structure validation - must have at least 2 segments
(assert (>= (str.num_splits user_domain ".") 2))
(assert (>= (str.num_splits backup_domain ".") 2))

; ; Extract first domain segment for user email
(declare-const user_domain_first String)
(assert (= user_domain_first (str.split_at user_domain "." 0)))
(assert (>= (str.len user_domain_first) 2))

; ; Extract remaining domain parts for user email
(declare-const user_domain_rest String)
(assert (= user_domain_rest (str.split_rest user_domain "." 1)))
(assert (>= (str.len user_domain_rest) 3))

; Backup domain must have exactly 2 segments (no subdomains)
(assert (= (str.num_splits backup_domain ".") 2))

; Corporate email constraint - user domain must have subdomain
(assert (>= (str.num_splits user_domain ".") 3))

; ; Extract subdomain from user domain
(declare-const user_subdomain String)
(assert (= user_subdomain (str.split_at user_domain "." 0)))
(assert (>= (str.len user_subdomain) 1))

; Main domain after subdomain
(declare-const user_main_domain String)
(assert (= user_main_domain (str.split_at user_domain "." 1)))
(assert (>= (str.len user_main_domain) 3))

; ; TLD extraction for user email
(declare-const user_tld String)
(assert (= user_tld (str.split_at user_domain "." 2)))
(assert (and (>= (str.len user_tld) 2) (<= (str.len user_tld) 4)))

; Different domains constraint
(assert (not (= user_domain backup_domain)))

; No consecutive dots in domains
(assert (not (str.contains user_domain "..")))
(assert (not (str.contains backup_domain "..")))

(check-sat)
(get-model)
