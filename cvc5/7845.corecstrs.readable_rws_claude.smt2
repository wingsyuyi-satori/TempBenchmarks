(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV processing with multiple delimiter support
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Input data records with different delimiter formats
(declare-const tsv_record String)
(declare-const pipe_record String)
(declare-const semicolon_record String)

; TSV processing - tab-separated values
(declare-const tsv_field_count Int)
(assert (= tsv_field_count (str.num_splits tsv_record " ")))
(assert (= tsv_field_count 4))

; ; Extract TSV fields
(declare-const tsv_name String)
(declare-const tsv_age String)
(declare-const tsv_email String)
(declare-const tsv_department String)
(assert (= tsv_name (str.split_at tsv_record " " 0)))
(assert (= tsv_age (str.split_at tsv_record " " 1)))
(assert (= tsv_email (str.split_at tsv_record " " 2)))
(assert (= tsv_department (str.split_at tsv_record " " 3)))

; Name field validation - no empty names
(assert (> (str.len tsv_name) 0))
(assert (not (str.contains tsv_name " ")))

; Age field validation - numeric representation
(assert (and (> (str.len tsv_age) 0) (<= (str.len tsv_age) 3)))

; Email field validation - must contain @ symbol
(assert (str.contains tsv_email "@"))

; Pipe-delimited record processing
(declare-const pipe_field_count Int)
(assert (= pipe_field_count (str.num_splits pipe_record "|")))
(assert (>= pipe_field_count 5))

; ; Extract first three pipe fields
(declare-const pipe_id String)
(declare-const pipe_status String)
(declare-const pipe_description String)
(assert (= pipe_id (str.split_at pipe_record "|" 0)))
(assert (= pipe_status (str.split_at pipe_record "|" 1)))
(assert (= pipe_description (str.split_at pipe_record "|" 2)))

; Get remaining pipe fields for further processing
(declare-const pipe_remainder String)
(assert (= pipe_remainder (str.split_rest pipe_record "|" 3)))

; ID field must be non-empty and numeric-like
(assert (> (str.len pipe_id) 0))
(assert (not (str.contains pipe_id "|")))

; Status field constraints - specific values allowed
(assert (or (= pipe_status "ACTIVE") (= pipe_status "INACTIVE") (= pipe_status "PENDING")))

; Description can be empty (optional field)
(assert (>= (str.len pipe_description) 0))

; Semicolon-delimited record processing
(declare-const semi_field_count Int)
(assert (= semi_field_count (str.num_splits semicolon_record ";")))
(assert (and (>= semi_field_count 3) (<= semi_field_count 6)))

; ; Extract semicolon fields
(declare-const semi_product String)
(declare-const semi_price String)
(declare-const semi_category String)
(assert (= semi_product (str.split_at semicolon_record ";" 0)))
(assert (= semi_price (str.split_at semicolon_record ";" 1)))
(assert (= semi_category (str.split_at semicolon_record ";" 2)))

; Product name validation
(assert (> (str.len semi_product) 0))
(assert (not (str.contains semi_product ";")))

; Price field validation - must not be empty
(assert (> (str.len semi_price) 0))

; Category field can be empty but if present, must be valid
(assert (or (= (str.len semi_category) 0) 
 (and (> (str.len semi_category) 0) 
 (not (str.contains semi_category ";")))))

; Cross-format validation - ensure no delimiter mixing
(assert (not (str.contains tsv_record ",")))
(assert (not (str.contains tsv_record "|")))
(assert (not (str.contains tsv_record ";")))

(assert (not (str.contains pipe_record ",")))
(assert (not (str.contains pipe_record " ")))
(assert (not (str.contains pipe_record ";")))

(assert (not (str.contains semicolon_record ",")))
(assert (not (str.contains semicolon_record " ")))
(assert (not (str.contains semicolon_record "|")))

; Escape handling - ensure no unescaped quotes in critical fields
(assert (not (str.contains tsv_name """")))
(assert (not (str.contains pipe_id """")))
(assert (not (str.contains semi_product """")))

(check-sat)
(get-model)
