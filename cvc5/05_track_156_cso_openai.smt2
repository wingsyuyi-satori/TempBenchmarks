(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Joel Day, Thorsten Ehlers, Mitja Kulczynski, Federico Mora, Florin Manea, Dirk Nowotka, Danny Poulsen, Zhengyang Lu
Application: Test WOORPJE
Target solver: WOORPJE
Publications: Day, J. D., Ehlers, T., Kulczynski, M., Manea, F., Nowotka, D., & Poulsen, D. B. (2019). On solving word equations using SAT. In RP 2019
Description: Enriches a system of 30 word equations by suitable linear constraints
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun I () String)
(declare-fun H () String)
(declare-fun F () String)
(declare-fun E () String)
(assert (= (str.++  "efadc" E "ebcecedeaabfcbfadfdcf")  (str.++  "efadcfdcafd" I "ce" F "aabfcbfadfdcf") ))
(assert (= (str.++  "fbcccbdefcfdaaffbeafbdfaf" H "abababdeef")  (str.++  "fbcccbdefcfdaaffbeafbdfaf" H "abababdeef") ))
(assert (= (str.++  "aebcefcffadceeabecadeeaae" I "ccbfadcbcf")  (str.++  "aebcefcffadceeabecadeeaaebcddcccbfadcbcf" "") ))
(assert (>=(* (str.len I) 13) 13))
(assert (>=(* (str.len E) 17) 204))
(assert (<=(* (str.len E) 14) 1834))
(assert (<=(* (str.len H) 14) 126))
(assert (<=(* (str.len F) 9) 1539))

; --- LLM Generated Split Constraints ---
; Split E by delimiter "d", require at least 3 segments
(declare-const E_d_count Int)
(assert (= E_d_count (str.num_splits E "d")))
(assert (>= E_d_count 3))
; Split H by delimiter "a", require exactly 2 segments
(declare-const H_a_count Int)
(assert (= H_a_count (str.num_splits H "a")))
(assert (= H_a_count 2))
; Nested split: Take first segment of E split by "d", then split by "e"
(declare-const E_d0 String)
(assert (= E_d0 (str.split_at E "d" 0)))
(declare-const E_d0_e_count Int)
(assert (= E_d0_e_count (str.num_splits E_d0 "e")))
(assert (>= E_d0_e_count 2))
; Split F by delimiter "c", collect first and last segments
(declare-const F_c_first String)
(declare-const F_c_last String)
(assert (= F_c_first (str.split_at F "c" 0)))
(assert (= F_c_last (str.split_at F "c" (- (str.num_splits F "c") 1))))
; Cross-dependency: first segment of E by "d" equals last segment of F by "c"
(assert (= E_d0 F_c_last))
; Validation: The first segment of H split by "a" is not contained in any segment of E split by "d"
(declare-const H_a0 String)
(assert (= H_a0 (str.split_at H "a" 0)))
; Advanced: The length of first segment of E split by "d" is strictly greater than the length of the first segment of H split by "a"
(assert (> (str.len E_d0) (str.len H_a0)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
