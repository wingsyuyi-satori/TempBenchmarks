(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_4 () Bool)
(declare-fun var_0xINPUT_99606 () String)
(assert (= T_1 (not (= "" var_0xINPUT_99606))))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (not (= "" var_0xINPUT_99606))))
(assert (= T_4 (not T_3)))
(assert T_4)

; --- LLM Generated Split Constraints ---
; Split by "," and then split first segment by "|"
(declare-const segs_count Int)
(assert (= segs_count (str.num_splits var_0xINPUT_99606 ",")))
(assert (>= segs_count 3))
(declare-const seg0 String)
(declare-const seg1 String)
(declare-const seg2 String)
(assert (= seg0 (str.split_at var_0xINPUT_99606 "," 0)))
(assert (= seg1 (str.split_at var_0xINPUT_99606 "," 1)))
(assert (= seg2 (str.split_at var_0xINPUT_99606 "," 2)))
; Nested split: seg0 by "|"
(declare-const seg0a String)
(declare-const seg0b String)
(assert (= seg0a (str.split_at seg0 "|" 0)))
(assert (= seg0b (str.split_rest seg0 "|" 1)))
; Nested split: seg2 by ":"
(declare-const seg2a String)
(declare-const seg2b String)
(assert (= seg2a (str.split_at seg2 ":" 0)))
(assert (= seg2b (str.split_rest seg2 ":" 1)))
; Cross-part relationship: seg0b and seg2a must be equal
(assert (= seg0b seg2a))
; Advanced validation: seg1 is a prefix of seg2b
(assert (str.prefixof seg1 seg2b))
; Advanced validation: seg2b is longer than seg0a
(assert (> (str.len seg2b) (str.len seg0a)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
