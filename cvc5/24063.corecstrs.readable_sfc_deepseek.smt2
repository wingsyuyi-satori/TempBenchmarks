(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_5 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun T0_5 () String)
(declare-fun T1_5 () String)
(declare-fun T2_5 () String)
(declare-fun T3_5 () String)
(declare-fun T4_5 () String)
(declare-fun T5_5 () String)
(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_5 () Bool)
(declare-fun T_6 () Bool)
(declare-fun T_SELECT_1 () Bool)
(declare-fun var_0xINPUT_112703 () String)
(assert (= T_1 (= "-" var_0xINPUT_112703)))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (= "" var_0xINPUT_112703)))
(assert T_3)
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_5 0)) (= var_0xINPUT_112703 (str.++ T0_5 T1_5)) (= I0_5 (str.len T4_5)) (= 0 (str.len T0_5)) (= T1_5 (str.++ T2_5 T3_5)) (= T2_5 (str.++ T4_5 T5_5)) (= T5_5 "__utma=16886264.") (not (str.in_re T4_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "a") (str.to_re "=") (str.to_re "1") (str.to_re "6") (str.to_re "8") (str.to_re "8") (str.to_re "6") (str.to_re "2") (str.to_re "6") (str.to_re "4") (str.to_re "."))))) (and (= PCTEMP_LHS_1 (- 1)) (= var_0xINPUT_112703 (str.++ T0_5 T1_5)) (= 0 (str.len T0_5)) (not (str.in_re T1_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "a") (str.to_re "=") (str.to_re "1") (str.to_re "6") (str.to_re "8") (str.to_re "8") (str.to_re "6") (str.to_re "2") (str.to_re "6") (str.to_re "4") (str.to_re ".")))))))
(assert (= T_5 (< (- 1) PCTEMP_LHS_1)))
(assert (= T_6 (not T_5)))
(assert T_6)

; --- LLM Generated Split Constraints ---
; Split the input string on common delimiters to analyze structure
(declare-fun split_underscore_0 () String)
(declare-fun split_underscore_1 () String)
(assert (= split_underscore_0 (str.split_at var_0xINPUT_112703 "_" 0)))
(assert (= split_underscore_1 (str.split_at var_0xINPUT_112703 "_" 1)))
(assert (>= (str.num_splits var_0xINPUT_112703 "_") 1))
; ; Check for potential utma cookie segments
(declare-fun split_dot_0 () String)
(declare-fun split_dot_1 () String)
(assert (= split_dot_0 (str.split_at var_0xINPUT_112703 "." 0)))
(assert (= split_dot_1 (str.split_at var_0xINPUT_112703 "." 1)))
(assert (<= (str.num_splits var_0xINPUT_112703 ".") 2))
; ; Validate split segments have reasonable lengths
(assert (<= (str.len split_underscore_0) 20))
(assert (<= (str.len split_underscore_1) 50))
(assert (<= (str.len split_dot_0) 30))
(assert (<= (str.len split_dot_1) 30))
; Get remaining segments after first underscore
(declare-fun rest_after_underscore () String)
(assert (= rest_after_underscore (str.split_rest var_0xINPUT_112703 "_" 1)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
