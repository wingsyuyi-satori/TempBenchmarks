(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_89339 () String)
(assert (= T_1 (not (= "" var_0xINPUT_89339))))
(assert T_1)
(assert (= T_2 (not (= var_0xINPUT_89339 ""))))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Multi-level and cross-dependent splits on var_0xINPUT_89339
; Split on "|"
(declare-const parts_count Int)
(assert (= parts_count (str.num_splits var_0xINPUT_89339 "|")))
(assert (>= parts_count 3))
(declare-const left String)
(declare-const mid String)
(declare-const right String)
(assert (= left (str.split_at var_0xINPUT_89339 "|" 0)))
(assert (= mid (str.split_at var_0xINPUT_89339 "|" 1)))
(assert (= right (str.split_rest var_0xINPUT_89339 "|" 2)))
; Left part split on ":"
(declare-const left_k String)
(declare-const left_v String)
(assert (= left_k (str.split_at left ":" 0)))
(assert (= left_v (str.split_rest left ":" 1)))
(assert (not (= left_k "")))
(assert (not (= left_v "")))
; Mid part split on "-"
(declare-const mid_a String)
(declare-const mid_b String)
(assert (= mid_a (str.split_at mid "-" 0)))
(assert (= mid_b (str.split_rest mid "-" 1)))
; Advanced cross-dependency: left_k equals mid_b reversed
(declare-const mid_b_rev String)
(assert (= left_k mid_b_rev))
; Nested split: right part split on "+"
(declare-const right_x String)
(declare-const right_y String)
(assert (= right_x (str.split_at right "+" 0)))
(assert (= right_y (str.split_rest right "+" 1)))
; Advanced validation: lengths and containment
(assert (> (str.len right_x) 2))
(assert (< (str.len right_y) 10))
(assert (str.contains left_v right_x))
(assert (not (str.contains left_v mid_a)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
