(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "0") (str.to_re "11"))) (re.++ (re.union (re.* (str.to_re "22")) (re.* (str.to_re "3"))) (re.++ (re.+ (re.* (str.to_re "4"))) (re.++ (re.union (re.+ (str.to_re "555")) (re.* (str.to_re "6"))) (re.++ (re.union (re.* (str.to_re "777")) (re.* (str.to_re "8"))) (re.++ (re.+ (re.union (str.to_re "999") (str.to_re "aa"))) (re.++ (re.+ (re.+ (str.to_re "b"))) (re.++ (re.+ (re.+ (str.to_re "c"))) (re.++ (re.+ (re.+ (str.to_re "ddd"))) (re.++ (re.union (re.+ (str.to_re "eee")) (re.union (str.to_re "f") (str.to_re "ggg"))) (re.* (re.* (str.to_re "hh")))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.union (re.* (str.to_re "00")) (re.union (str.to_re "1") (str.to_re "2"))) (re.++ (re.+ (re.+ (str.to_re "33"))) (re.++ (re.+ (re.+ (str.to_re "44"))) (re.++ (re.+ (re.* (str.to_re "555"))) (re.++ (re.+ (re.* (str.to_re "666"))) (re.++ (re.* (re.union (str.to_re "777") (str.to_re "88"))) (re.++ (re.union (re.union (str.to_re "999") (str.to_re "aa")) (re.* (str.to_re "bb"))) (re.++ (re.* (re.+ (str.to_re "c"))) (re.++ (re.* (re.* (str.to_re "ddd"))) (re.++ (re.* (re.* (str.to_re "e"))) (re.union (re.* (str.to_re "f")) (re.union (str.to_re "gg") (str.to_re "h"))))))))))))))))

; --- LLM Generated Split Constraints ---
; Split var0 by "b" into segments for further analysis
(declare-const b_seg_count Int)
(assert (= b_seg_count (str.num_splits var0 "b")))
(assert (>= b_seg_count 3))
(declare-const b_first String)
(declare-const b_second String)
(declare-const b_tail String)
(assert (= b_first (str.split_at var0 "b" 0)))
(assert (= b_second (str.split_at var0 "b" 1)))
(assert (= b_tail (str.split_rest var0 "b" 2)))
; Nested split: split b_first by "11"
(declare-const pre11 String)
(declare-const post11 String)
(assert (= pre11 (str.split_at b_first "11" 0)))
(assert (= post11 (str.split_rest b_first "11" 1)))
; Split b_second by "aa" and "c" (multiple delimiters, cross-dependencies)
(declare-const aa_split0 String)
(declare-const aa_split1 String)
(assert (= aa_split0 (str.split_at b_second "aa" 0)))
(assert (= aa_split1 (str.split_rest b_second "aa" 1)))
(declare-const c_split0 String)
(declare-const c_split1 String)
(assert (= c_split0 (str.split_at b_second "c" 0)))
(assert (= c_split1 (str.split_rest b_second "c" 1)))
; Cross-split dependency: Enforce that the length of pre11 is less than the length of aa_split0
(assert (< (str.len pre11) (str.len aa_split0)))
; ; Advanced constraint: the tail after last "b" must contain at least one "ddd"
(assert (str.contains b_tail "ddd"))
; Relationship between nested and main splits
(assert (not (= post11 c_split1)))
; Validation: All of b_first, b_second, and b_tail are pairwise distinct
(assert (distinct b_first b_second b_tail))
; The "c_split0" segment must start with "999" or "aa"
(assert (or (str.prefixof "999" c_split0) (str.prefixof "aa" c_split0)))
; --- End LLM Generated Constraints ---

(check-sat)
(get-model)
