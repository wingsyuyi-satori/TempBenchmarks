(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV processing with multiple delimiter support
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Multi-delimiter CSV processing scenario
(declare-const input_record String)
(declare-const delimiter String)

; Delimiter must be one of the supported separators
(assert (or (= delimiter ",") (= delimiter "\t") (= delimiter ";") (= delimiter "|")))

; Record must have exactly 4 fields for validation
(assert (= (str.num_splits input_record delimiter) 4))

; ; Extract all four fields
(declare-const name_field String)
(declare-const email_field String)
(declare-const age_field String)
(declare-const status_field String)

(assert (= name_field (str.split_at input_record delimiter 0)))
(assert (= email_field (str.split_at input_record delimiter 1)))
(assert (= age_field (str.split_at input_record delimiter 2)))
(assert (= status_field (str.split_at input_record delimiter 3)))

; Name field validation - not empty and no special characters
(assert (> (str.len name_field) 0))
(assert (not (str.contains name_field delimiter)))
(assert (not (str.contains name_field "\n")))

; Email field validation - must contain @ symbol
(assert (str.contains email_field "@"))
(assert (> (str.len email_field) 3))

; Age field validation - numeric representation constraints
(assert (> (str.len age_field) 0))
(assert (<= (str.len age_field) 3))
(assert (not (= age_field "")))

; Status field can be empty (optional field)
(assert (>= (str.len status_field) 0))

; Escape handling - ensure no unescaped quotes in fields
(assert (not (str.contains name_field """")))
(assert (not (str.contains email_field """")))

; Additional constraint - if using tab delimiter, record length has limits
(assert (=> (= delimiter "\t") (<= (str.len input_record) 200)))

; Pipe delimiter constraint - status field must not be empty
(assert (=> (= delimiter "|") (> (str.len status_field) 0)))

; Semicolon delimiter constraint - name field has minimum length
(assert (=> (= delimiter ";") (>= (str.len name_field) 2)))

; Field count verification - ensure split produces expected number
(declare-const total_segments Int)
(assert (= total_segments (str.num_splits input_record delimiter)))
(assert (= total_segments 4))

(check-sat)
(get-model)
