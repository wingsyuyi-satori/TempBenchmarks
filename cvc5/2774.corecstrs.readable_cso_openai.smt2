(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_2 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun T0_2 () String)
(declare-fun T1_2 () String)
(declare-fun T2_2 () String)
(declare-fun T3_2 () String)
(declare-fun T4_2 () String)
(declare-fun T5_2 () String)
(declare-fun T_2 () Bool)
(declare-fun T_SELECT_1 () Bool)
(declare-fun var_0xINPUT_15379 () String)
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_2 0)) (= var_0xINPUT_15379 (str.++ T0_2 T1_2)) (= I0_2 (str.len T4_2)) (= 0 (str.len T0_2)) (= T1_2 (str.++ T2_2 T3_2)) (= T2_2 (str.++ T4_2 T5_2)) (= T5_2 "__gads=") (not (str.in_re T4_2 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "g") (str.to_re "a") (str.to_re "d") (str.to_re "s") (str.to_re "="))))) (and (= PCTEMP_LHS_1 (- 1)) (= var_0xINPUT_15379 (str.++ T0_2 T1_2)) (= 0 (str.len T0_2)) (not (str.in_re T1_2 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "g") (str.to_re "a") (str.to_re "d") (str.to_re "s") (str.to_re "=")))))))
(assert (= T_2 (not (= PCTEMP_LHS_1 (- 1)))))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_15379 on delimiter ";"
(declare-const split_parts_count Int)
(assert (= split_parts_count (str.num_splits var_0xINPUT_15379 ";")))
(assert (>= split_parts_count 3))
(declare-const partA String)
(declare-const partB String)
(declare-const partC String)
(declare-const part_rest String)
(assert (= partA (str.split_at var_0xINPUT_15379 ";" 0)))
(assert (= partB (str.split_at var_0xINPUT_15379 ";" 1)))
(assert (= partC (str.split_at var_0xINPUT_15379 ";" 2)))
(assert (= part_rest (str.split_rest var_0xINPUT_15379 ";" 3)))
; Nested split: split partA by ":"
(declare-const partA_key String)
(declare-const partA_val String)
(assert (= partA_key (str.split_at partA ":" 0)))
(assert (= partA_val (str.split_rest partA ":" 1)))
; Nested split: split partB by "="
(declare-const partB_key String)
(declare-const partB_val String)
(assert (= partB_key (str.split_at partB "=" 0)))
(assert (= partB_val (str.split_rest partB "=" 1)))
; Cross-dependency: partA_key equals partB_key reversed
; Split partC by "-"
(declare-const partC1 String)
(declare-const partC2 String)
(assert (= partC1 (str.split_at partC "-" 0)))
(assert (= partC2 (str.split_rest partC "-" 1)))
; Advanced validation: partC1 must be a strict substring of partA_val
(assert (str.contains partA_val partC1))
(assert (not (= partA_val partC1)))
; The length of partB_val is strictly greater than the sum of lengths of partA_key and partC2
(assert (> (str.len partB_val) (+ (str.len partA_key) (str.len partC2))))
; At least one of partA_val or partB_val contains the string "token"
(assert (or (str.contains partA_val "token") (str.contains partB_val "token")))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
