(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Scenario: Email validation with split constraints and domain parsing
Target: SMT solvers supporting string split extensions
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Declare the email string variable
(declare-const email_addr String)

; The email must contain exactly one "@" symbol
(assert (= (str.num_splits email_addr "@") 2))

; Split into user and host part
(declare-const user String)
(declare-const host String)
(assert (= user (str.split_at email_addr "@" 0)))
(assert (= host (str.split_at email_addr "@" 1)))

; The user part must not be empty and must not contain "."
(assert (> (str.len user) 0))
(assert (= (str.contains user ".") false))

; The host part (domain) must contain at least two segments separated by "."
(assert (>= (str.num_splits host ".") 2))

; ; Extract the first and last segments of the domain
(declare-const subdomain String)
(declare-const tld String)
(assert (= subdomain (str.split_at host "." 0)))
(assert (= tld (str.split_at host "." (- (str.num_splits host ".") 1))))
(assert (> (str.len subdomain) 0))
(assert (> (str.len tld) 1))

; The TLD must not contain any "."
(assert (= (str.contains tld ".") false))

; The host part must not start or end with "."
(assert (not (= (str.substr host 0 1) ".")))
(assert (not (= (str.substr host (- (str.len host) 1) 1) ".")))

; ; UNSAT example: The user and host parts are equal (should not be allowed for real emails)
(assert (= user host))

(check-sat)
(get-model)
