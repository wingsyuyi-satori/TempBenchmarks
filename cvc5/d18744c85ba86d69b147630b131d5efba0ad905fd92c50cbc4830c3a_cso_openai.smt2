(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Wei-Cheng Wu
Generated on: 2020-02-24
Generator: PyExZ3
Application: Concolic execution of Python code
Target solver: CVC4, Z3, Z3str3, Z3-Trau
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun word1 () String)
(declare-fun in1 () String)
(declare-fun in0 () String)

(assert (and (not (not (= (ite (= word1 in1) 1 0) 0))) (not (= (ite (= word1 in0) 1 0) 0))))

; --- LLM Generated Split Constraints ---
; Split word1 by the constant delimiter "_", expecting at least two segments
(declare-const w1_parts_count Int)
(assert (= w1_parts_count (str.num_splits word1 "_")))
(assert (>= w1_parts_count 2))
; ; Extract first two segments from word1 split by "_"
(declare-const w1_part0 String)
(declare-const w1_part1 String)
(assert (= w1_part0 (str.split_at word1 "_" 0)))
(assert (= w1_part1 (str.split_at word1 "_" 1)))
; Split in1 and in0 by the constant delimiter "-"
(declare-const in1_parts_count Int)
(declare-const in0_parts_count Int)
(assert (= in1_parts_count (str.num_splits in1 "-")))
(assert (= in0_parts_count (str.num_splits in0 "-")))
(assert (>= in1_parts_count 2))
(assert (>= in0_parts_count 2))
; Get first two segments of in1 and in0
(declare-const in1_part0 String)
(declare-const in1_part1 String)
(declare-const in0_part0 String)
(declare-const in0_part1 String)
(assert (= in1_part0 (str.split_at in1 "-" 0)))
(assert (= in1_part1 (str.split_at in1 "-" 1)))
(assert (= in0_part0 (str.split_at in0 "-" 0)))
(assert (= in0_part1 (str.split_at in0 "-" 1)))
; ; Nested split: split w1_part1 by "." and extract the first segment
(declare-const w1_part1_dot0 String)
(assert (= w1_part1_dot0 (str.split_at w1_part1 "." 0)))
; Advanced validation: the first "-" segment of in1 equals the first "_" segment of word1
(assert (= in1_part0 w1_part0))
; Cross-dependency: the first "." segment of w1_part1 matches the first "-" segment of in0
(assert (= w1_part1_dot0 in0_part0))
; ; Advanced constraint: the length of the second "-" segment in in0 is greater than that of in1
(assert (> (str.len in0_part1) (str.len in1_part1)))
; ; Advanced constraint: concatenation of w1_part0 and w1_part1 with "_" equals word1
(assert (= word1 (str.++ w1_part0 "_" w1_part1)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
