(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun PCTEMP_LHS_1 () String)
(declare-fun PCTEMP_LHS_2 () String)
(declare-fun T1_3 () String)
(declare-fun T2_3 () String)
(declare-fun T_1 () String)
(declare-fun var_0xINPUT_27346 () String)
(assert (= T_1 (str.++ T1_3 T2_3)))
(assert (= T2_3 var_0xINPUT_27346))
(assert (= T1_3 "/signin"))
(assert (= PCTEMP_LHS_2 PCTEMP_LHS_1))
(assert (not (str.in_re PCTEMP_LHS_2 (str.to_re "%"))))

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_27346 by "." and by "@"
(declare-fun dot_parts_count () Int)
(assert (= dot_parts_count (str.num_splits var_0xINPUT_27346 ".")))
(assert (>= dot_parts_count 2))
(declare-fun at_parts_count () Int)
(assert (= at_parts_count (str.num_splits var_0xINPUT_27346 "@")))
(assert (= at_parts_count 2))
; ; Extract local and domain parts from split by "@"
(declare-fun local_part () String)
(declare-fun domain_part () String)
(assert (= local_part (str.split_at var_0xINPUT_27346 "@" 0)))
(assert (= domain_part (str.split_at var_0xINPUT_27346 "@" 1)))
; Nested split: domain_part by "."
(declare-fun domain_first () String)
(declare-fun domain_rest () String)
(assert (= domain_first (str.split_at domain_part "." 0)))
(assert (= domain_rest (str.split_rest domain_part "." 1)))
; Cross-dependency: ensure local_part does not appear in domain_part
(assert (not (str.contains domain_part local_part)))
; Advanced validation: length and content relationships
(assert (< (str.len domain_first) (str.len local_part)))
(assert (> (str.len domain_rest) 2))
(assert (not (= domain_first "admin")))
(assert (str.contains local_part "user"))
; Ensure no "%" in any segment
(assert (not (str.contains local_part "%")))
(assert (not (str.contains domain_first "%")))
(assert (not (str.contains domain_rest "%")))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
