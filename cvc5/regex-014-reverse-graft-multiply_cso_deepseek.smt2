(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (str.to_re "bbaa")))
(assert (str.in_re y (re.* (str.to_re "bbaa"))))
(assert (= 4 (str.len x)))
(assert (= (str.len y) 8))

; --- LLM Generated Split Constraints ---
; Multi-delimiter splitting with nested dependencies
(declare-const s String)
(assert (str.contains s "|"))
(assert (str.contains s ";"))
(assert (> (str.len s) 15))
; First split by "|" into at least 3 parts
(declare-const pipe_parts Int)
(assert (= pipe_parts (str.num_splits s "|")))
(assert (>= pipe_parts 3))
; ; Extract first two pipe-separated segments
(declare-const seg1 String)
(declare-const seg2 String)
(declare-const seg3_rest String)
(assert (= seg1 (str.split_at s "|" 0)))
(assert (= seg2 (str.split_at s "|" 1)))
(assert (= seg3_rest (str.split_rest s "|" 2)))
; Split seg2 further by ";" with cross-validation
(assert (>= (str.num_splits seg2 ";") 2))
(declare-const subseg1 String)
(declare-const subseg2 String)
(assert (= subseg1 (str.split_at seg2 ";" 0)))
(assert (= subseg2 (str.split_rest seg2 ";" 1)))
; Length constraints between nested splits
(assert (> (str.len seg1) (str.len subseg1)))
(assert (< (str.len subseg2) (str.len seg3_rest)))
; Final validation combining multiple splits
(assert (str.contains seg3_rest subseg1))
(assert (not (str.prefixof subseg2 seg1)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
