(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (re.+ (re.+ (re.+ (re.+ (re.* (re.* (str.to_re "00")))))))) (re.union (re.union (re.* (re.+ (re.+ (re.* (re.union (str.to_re "11") (str.to_re "2")))))) (re.+ (re.union (re.+ (re.union (re.+ (str.to_re "33")) (re.+ (str.to_re "444")))) (re.* (re.* (re.* (str.to_re "555"))))))) (re.+ (re.+ (re.* (re.+ (re.* (re.union (str.to_re "666") (str.to_re "7"))))))))) (re.union (re.union (re.* (re.union (re.* (re.+ (re.* (re.union (str.to_re "8") (str.to_re "9"))))) (re.+ (re.union (re.+ (re.* (str.to_re "a"))) (re.+ (re.union (str.to_re "bb") (str.to_re "ccc"))))))) (re.+ (re.+ (re.union (re.+ (re.union (re.* (str.to_re "d")) (re.* (str.to_re "e")))) (re.* (re.union (re.* (str.to_re "f")) (re.+ (str.to_re "ggg")))))))) (re.+ (re.* (re.+ (re.union (re.union (re.union (re.+ (str.to_re "h")) (re.+ (str.to_re "ii"))) (re.union (re.union (str.to_re "jjj") (str.to_re "kkk")) (re.+ (str.to_re "lll")))) (re.union (re.union (re.+ (str.to_re "mm")) (re.* (str.to_re "n"))) (re.+ (re.union (str.to_re "o") (str.to_re "ppp"))))))))))))
(assert (<= 15 (str.len var0)))

; --- LLM Generated Split Constraints ---
; Split var0 on delimiter "a", minimum two segments required
(declare-const a_parts_count Int)
(assert (= a_parts_count (str.num_splits var0 "a")))
(assert (>= a_parts_count 2))
(declare-const a_part0 String)
(declare-const a_part1 String)
(declare-const a_rest String)
(assert (= a_part0 (str.split_at var0 "a" 0)))
(assert (= a_part1 (str.split_at var0 "a" 1)))
(assert (= a_rest (str.split_rest var0 "a" 2)))
; Take a_part1 and split by "b"
(declare-const b_parts_count Int)
(assert (= b_parts_count (str.num_splits a_part1 "b")))
(assert (>= b_parts_count 2))
(declare-const b_part0 String)
(declare-const b_part1 String)
(assert (= b_part0 (str.split_at a_part1 "b" 0)))
(assert (= b_part1 (str.split_at a_part1 "b" 1)))
; Now split a_rest by "c"
(declare-const c_parts_count Int)
(assert (= c_parts_count (str.num_splits a_rest "c")))
(assert (>= c_parts_count 2))
(declare-const c_part0 String)
(declare-const c_part1 String)
(assert (= c_part0 (str.split_at a_rest "c" 0)))
(assert (= c_part1 (str.split_at a_rest "c" 1)))
; Cross-dependency: b_part0 must be a substring of c_part1
(assert (str.contains c_part1 b_part0))
; Advanced validation: a_part0 and c_part0 must not overlap
(assert (not (str.contains a_part0 c_part0)))
(assert (not (str.contains c_part0 a_part0)))
; ; Advanced constraint: length of b_part1 plus c_part0 must be less than a_part0
(assert (< (+ (str.len b_part1) (str.len c_part0)) (str.len a_part0)))
; --- End LLM Generated Constraints ---

(check-sat)
(get-model)
