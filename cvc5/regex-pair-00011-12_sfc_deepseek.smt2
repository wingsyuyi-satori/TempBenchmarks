(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "0") (str.to_re "11"))) (re.++ (re.union (re.* (str.to_re "22")) (re.* (str.to_re "3"))) (re.++ (re.+ (re.* (str.to_re "4"))) (re.++ (re.union (re.+ (str.to_re "555")) (re.* (str.to_re "6"))) (re.++ (re.union (re.* (str.to_re "777")) (re.* (str.to_re "8"))) (re.++ (re.+ (re.union (str.to_re "999") (str.to_re "aa"))) (re.++ (re.+ (re.+ (str.to_re "b"))) (re.++ (re.+ (re.+ (str.to_re "c"))) (re.++ (re.+ (re.+ (str.to_re "ddd"))) (re.++ (re.union (re.+ (str.to_re "eee")) (re.union (str.to_re "f") (str.to_re "ggg"))) (re.* (re.* (str.to_re "hh")))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.union (re.* (str.to_re "00")) (re.union (str.to_re "1") (str.to_re "2"))) (re.++ (re.+ (re.+ (str.to_re "33"))) (re.++ (re.+ (re.+ (str.to_re "44"))) (re.++ (re.+ (re.* (str.to_re "555"))) (re.++ (re.+ (re.* (str.to_re "666"))) (re.++ (re.* (re.union (str.to_re "777") (str.to_re "88"))) (re.++ (re.union (re.union (str.to_re "999") (str.to_re "aa")) (re.* (str.to_re "bb"))) (re.++ (re.* (re.+ (str.to_re "c"))) (re.++ (re.* (re.* (str.to_re "ddd"))) (re.++ (re.* (re.* (str.to_re "e"))) (re.union (re.* (str.to_re "f")) (re.union (str.to_re "gg") (str.to_re "h"))))))))))))))))

; --- LLM Generated Split Constraints ---
(declare-const first_segment String)
(declare-const second_segment String)
(declare-const rest_segments String)
; Split on "1" delimiter and get first two segments
(assert (= first_segment (str.split_at var0 "1" 0)))
(assert (= second_segment (str.split_at var0 "1" 1)))
; Get remaining segments after first split
(assert (= rest_segments (str.split_rest var0 "1" 1)))
; Basic validation constraints
(assert (<= (str.num_splits var0 "1") 3)) ; At most 3 segments when splitting on "1"
(assert (>= (str.len first_segment) 1)) ; First segment should not be empty
(assert (str.contains var0 "1")) ; Original string must contain the delimiter
; Additional split on "a" delimiter
(assert (<= (str.num_splits var0 "a") 2)) ; At most 2 segments when splitting on "a"
; --- End LLM Generated Constraints ---

(check-sat)
(exit)
(get-model)
