(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (str.to_re "bbaa")))
(assert (str.in_re y (re.* (str.to_re "bbaa"))))
(assert (= 4 (str.len x)))
(assert (= (str.len y) 8))

; --- LLM Generated Split Constraints ---
(declare-const x_part0 String)
(declare-const x_part1 String)
(declare-const y_part0 String)
(declare-const y_part1 String)
(declare-const y_part2 String)
(assert (= x_part0 (str.split_at x "b" 0)))
(assert (= x_part1 (str.split_at x "b" 1)))
(assert (= (str.num_splits x "b") 3))
(assert (= y_part0 (str.split_at y "bb" 0)))
(assert (= y_part1 (str.split_at y "bb" 1)))
(assert (= y_part2 (str.split_at y "bb" 2)))
(assert (= (str.num_splits y "bb") 3))
(assert (>= (str.len x_part0) 0))
(assert (>= (str.len x_part1) 0))
(assert (>= (str.len y_part0) 0))
(assert (>= (str.len y_part1) 0))
(assert (>= (str.len y_part2) 0))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
