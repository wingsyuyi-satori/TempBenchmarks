(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_4 () Bool)
(declare-fun var_0xINPUT_118656 () String)
(assert (= T_1 (= "-" var_0xINPUT_118656)))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (= "" var_0xINPUT_118656)))
(assert (= T_4 (not T_3)))
(assert T_4)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_118656 by ":", require at least 3 segments
(declare-const seg_count Int)
(assert (= seg_count (str.num_splits var_0xINPUT_118656 ":")))
(assert (>= seg_count 3))
; ; Extract first, second, and third segments after split by ":"
(declare-const seg1 String)
(declare-const seg2 String)
(declare-const seg3_and_rest String)
(assert (= seg1 (str.split_at var_0xINPUT_118656 ":" 0)))
(assert (= seg2 (str.split_at var_0xINPUT_118656 ":" 1)))
(assert (= seg3_and_rest (str.split_rest var_0xINPUT_118656 ":" 2)))
; Now split seg3_and_rest by "-"
(declare-const dash_seg1 String)
(declare-const dash_seg2_and_rest String)
(assert (= dash_seg1 (str.split_at seg3_and_rest "-" 0)))
(assert (= dash_seg2_and_rest (str.split_rest seg3_and_rest "-" 1)))
; Nested split: split dash_seg2_and_rest by ":"
(declare-const nested_colon1 String)
(declare-const nested_colon2 String)
(assert (= nested_colon1 (str.split_at dash_seg2_and_rest ":" 0)))
(assert (= nested_colon2 (str.split_rest dash_seg2_and_rest ":" 1)))
; Cross-dependency: seg2 must be a prefix of nested_colon2
(assert (str.prefixof seg2 nested_colon2))
; Advanced validation: seg1 and dash_seg1 must have the same length, but different values
(assert (= (str.len seg1) (str.len dash_seg1)))
(assert (not (= seg1 dash_seg1)))
; Advanced validation: the concatenation of seg1, seg2, and dash_seg1 must not occur as a substring in var_0xINPUT_118656
(assert (not (str.contains var_0xINPUT_118656 (str.++ seg1 seg2 dash_seg1))))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
