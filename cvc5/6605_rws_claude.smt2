(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with domain structure analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with detailed domain parsing
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have valid @ structure
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components for primary email
(declare-const username String)
(declare-const domain String)
(assert (= username (str.split_at user_email "@" 0)))
(assert (= domain (str.split_at user_email "@" 1)))

; Username constraints
(assert (>= (str.len username) 3))
(assert (<= (str.len username) 64))

; Domain must have proper structure with multiple segments
(declare-const domain_segments Int)
(assert (= domain_segments (str.num_splits domain ".")))
(assert (>= domain_segments 2))
(assert (<= domain_segments 5))

; ; Extract domain components
(declare-const subdomain String)
(declare-const root_domain String)
(declare-const extension String)

; For domains with exactly 2 segments
(assert (=> (= domain_segments 2)
 (and (= subdomain "")
 (= root_domain (str.split_at domain "." 0))
 (= extension (str.split_at domain "." 1)))))

; For domains with 3+ segments 
(assert (=> (>= domain_segments 3)
 (and (= subdomain (str.split_at domain "." 0))
 (= root_domain (str.split_at domain "." 1))
 (= extension (str.split_rest domain "." 2)))))

; Domain component length constraints
(assert (> (str.len root_domain) 1))
(assert (>= (str.len extension) 2))
(assert (<= (str.len extension) 6))

; Backup email domain comparison
(declare-const backup_domain String)
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; Backup email must have different domain
(assert (not (= domain backup_domain)))

; Both domains must be valid
(assert (>= (str.num_splits backup_domain ".") 2))

; No consecutive dots allowed in any domain
(assert (not (str.contains domain "..")))
(assert (not (str.contains backup_domain "..")))

; Emails cannot start or end with special characters
(assert (not (str.prefixof "." user_email)))
(assert (not (str.suffixof "." user_email)))
(assert (not (str.prefixof "@" user_email)))
(assert (not (str.suffixof "@" user_email)))

(check-sat)
(get-model)
