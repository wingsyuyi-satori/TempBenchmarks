(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Email validation scenario using string split operations
Generated by LLM
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Declare the email string variable
(declare-const E String)

; Email must split into exactly two segments by "@"
(assert (= (str.num_splits E "@") 2))

; The local-part and domain-part of the email
(declare-const L String)
(declare-const D String)
(assert (= L (str.split_at E "@" 0)))
(assert (= D (str.split_at E "@" 1)))

; Local-part must not start or end with "."
(assert (not (= (str.at L 0) ".")))
(assert (not (= (str.at L (- (str.len L) 1)) ".")))

; Domain must split into at least three segments by "."
(declare-const domain_segments Int)
(assert (= domain_segments (str.num_splits D ".")))
(assert (>= domain_segments 3))

; First domain label must be non-empty and not "www"
(declare-const first_domain_label String)
(assert (= first_domain_label (str.split_at D "." 0)))
(assert (> (str.len first_domain_label) 0))
(assert (not (= first_domain_label "www")))

; Each label of the domain (split by ".") must be at least 2 characters (for first two labels)
(declare-const second_domain_label String)
(assert (= second_domain_label (str.split_at D "." 1)))
(assert (>= (str.len first_domain_label) 2))
(assert (>= (str.len second_domain_label) 2))

; Top-level domain must be at least 2 characters
(declare-const tld String)
(assert (= tld (str.split_at D "." (- domain_segments 1))))
(assert (>= (str.len tld) 2))

; ; Example: Email must not end with a dot
(assert (not (= (str.at E (- (str.len E) 1)) ".")))

; ; Unsatisfiable constraint: Local-part and domain must be identical (unrealistic for valid emails)
(assert (not (= L D)))

(check-sat)
(get-model)
