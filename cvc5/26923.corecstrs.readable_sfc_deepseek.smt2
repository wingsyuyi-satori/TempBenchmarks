(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun PCTEMP_LHS_1 () String)
(declare-fun PCTEMP_LHS_2 () String)
(declare-fun T1_3 () String)
(declare-fun T2_3 () String)
(declare-fun T_1 () String)
(declare-fun var_0xINPUT_27346 () String)
(assert (= T_1 (str.++ T1_3 T2_3)))
(assert (= T2_3 var_0xINPUT_27346))
(assert (= T1_3 "/signin"))
(assert (= PCTEMP_LHS_2 PCTEMP_LHS_1))
(assert (not (str.in_re PCTEMP_LHS_2 (str.to_re "%"))))

; --- LLM Generated Split Constraints ---
; Split the input string on forward slash to analyze path components
(assert (= (str.num_splits var_0xINPUT_27346 "/") 2))
(assert (= (str.split_at var_0xINPUT_27346 "/" 0) "")) ; First component should be empty for absolute path
(assert (= (str.split_at var_0xINPUT_27346 "/" 1) "signin")) ; Second component should match T1_3
; ; Validate PCTEMP_LHS_1 doesn't contain percent signs when split by spaces
(assert (not (str.contains (str.split_at PCTEMP_LHS_1 " " 0) "%")))
(assert (not (str.contains (str.split_at PCTEMP_LHS_1 " " 1) "%")))
; Basic validation on split segments length
(assert (> (str.len (str.split_rest var_0xINPUT_27346 "/" 0)) 0))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
