(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Multi-format CSV/TSV validation scenario
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Input data records with different delimiters
(declare-const tsv_record String)
(declare-const pipe_record String)
(declare-const semicolon_record String)

; TSV processing - tab-separated values
(declare-const tsv_name String)
(declare-const tsv_age String)
(declare-const tsv_email String)
(declare-const tsv_extra String)

; ; Extract TSV fields
(assert (= tsv_name (str.split_at tsv_record "\t" 0)))
(assert (= tsv_age (str.split_at tsv_record "\t" 1)))
(assert (= tsv_email (str.split_at tsv_record "\t" 2)))
(assert (= tsv_extra (str.split_rest tsv_record "\t" 3)))

; TSV must have exactly 4 fields
(assert (= (str.num_splits tsv_record "\t") 4))

; Pipe-delimited processing
(declare-const pipe_id String)
(declare-const pipe_status String)
(declare-const pipe_data String)

(assert (= pipe_id (str.split_at pipe_record "|" 0)))
(assert (= pipe_status (str.split_at pipe_record "|" 1)))
(assert (= pipe_data (str.split_at pipe_record "|" 2)))

; Pipe record must have at least 3 fields
(assert (>= (str.num_splits pipe_record "|") 3))

; Semicolon-delimited processing
(declare-const semi_field_count Int)
(declare-const semi_first String)
(declare-const semi_last String)

(assert (= semi_field_count (str.num_splits semicolon_record ";")))
(assert (= semi_first (str.split_at semicolon_record ";" 0)))

; ; Dynamic last field extraction based on count
(assert (= semi_last (str.split_at semicolon_record ";" (- semi_field_count 1))))

; Field validation constraints
; TSV name field cannot be empty
(assert (> (str.len tsv_name) 0))

; TSV age must be numeric (no letters)
(assert (not (str.contains tsv_age "a")))
(assert (not (str.contains tsv_age "b")))
(assert (not (str.contains tsv_age "c")))

; Email field must contain @ symbol
(assert (str.contains tsv_email "@"))

; Pipe ID must be non-empty and numeric-like
(assert (> (str.len pipe_id) 0))
(assert (not (str.contains pipe_id " ")))

; Status field validation - must be specific values
(assert (or (= pipe_status "ACTIVE") 
 (= pipe_status "INACTIVE") 
 (= pipe_status "PENDING")))

; Empty field handling
; Allow empty fields in pipe data but not in critical fields
(assert (>= (str.len pipe_data) 0))

; Semicolon record must have between 2 and 6 fields
(assert (and (>= semi_field_count 2) (<= semi_field_count 6)))

; First and last fields in semicolon record cannot both be empty
(assert (or (> (str.len semi_first) 0) (> (str.len semi_last) 0)))

; ; Cross-format consistency check
; If TSV name equals pipe ID, then certain constraints apply
(assert (=> (= tsv_name pipe_id)
 (and (= pipe_status "ACTIVE")
 (> (str.len pipe_data) 5))))

; Escape sequence handling - no unescaped quotes in critical fields
(assert (not (str.contains tsv_name """")))
(assert (not (str.contains pipe_id """")))

; Field length boundaries
(assert (<= (str.len tsv_name) 50))
(assert (<= (str.len tsv_age) 3))
(assert (<= (str.len pipe_id) 20))

(check-sat)
(exit)
(get-model)
