(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun var_0xINPUT_47381 () String)
(assert (= T_1 (not (= "file:" var_0xINPUT_47381))))
(assert T_1)

; --- LLM Generated Split Constraints ---
; Multi-delimiter hierarchical splitting with cross-validation
(declare-const input_parts (Array Int String))
(assert (= (select input_parts 0) (str.split_at var_0xINPUT_47381 "|" 0)))
(assert (= (select input_parts 1) (str.split_rest var_0xINPUT_47381 "|" 1)))
; ; Validate first part contains both ":" and "/"
(assert (str.contains (select input_parts 0) ":"))
(assert (str.contains (select input_parts 0) "/"))
; Split first part by ":" into protocol and path
(declare-const protocol String)
(declare-const path String)
(assert (= protocol (str.split_at (select input_parts 0) ":" 0)))
(assert (= path (str.split_rest (select input_parts 0) ":" 1)))
; Split path by "/" into segments
(declare-const path_segments (Array Int String))
(assert (>= (str.num_splits path "/") 3))
(assert (= (select path_segments 0) (str.split_at path "/" 0)))
(assert (= (select path_segments 1) (str.split_at (str.split_rest path "/" 1) "/" 0)))
; ; Cross-validate protocol and path segments
(assert (not (= protocol (select path_segments 0))))
(assert (str.prefixof "http" protocol))
(assert (str.suffixof "com" (select path_segments 1)))
; Process second main part with different delimiter
(assert (str.contains (select input_parts 1) ";"))
(declare-const params (Array Int String))
(assert (= (select params 0) (str.split_at (select input_parts 1) ";" 0)))
(assert (= (select params 1) (str.split_rest (select input_parts 1) ";" 1)))
; ; Validate parameter structure
(assert (str.contains (select params 0) "="))
(assert (not (str.contains (select params 1) "=")))
; Length constraints across all splits
(assert (> (str.len (select input_parts 0)) (str.len (select input_parts 1))))
(assert (< (str.len protocol) (str.len (select path_segments 0))))
(assert (= (str.len (select params 0)) (+ (str.len "id=") 10)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
