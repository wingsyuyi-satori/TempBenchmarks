(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const S String)
(assert (str.in_re S (re.++ re.allchar (str.to_re "bbbaaa"))))
(assert (not (str.in_re S (re.++ re.allchar (str.to_re "bbb")))))

; --- LLM Generated Split Constraints ---
; Split S by "a" and require at least three segments
(declare-const seg_count Int)
(assert (= seg_count (str.num_splits S "a")))
(assert (>= seg_count 3))
; The first segment before the first "a"
(declare-const seg0 String)
(assert (= seg0 (str.split_at S "a" 0)))
; The second segment between first and second "a"
(declare-const seg1 String)
(assert (= seg1 (str.split_at S "a" 1)))
; The third segment after the second "a"
(declare-const seg2 String)
(assert (= seg2 (str.split_at S "a" 2)))
; Further split seg1 by "b" and require two segments
(declare-const subseg_count Int)
(assert (= subseg_count (str.num_splits seg1 "b")))
(assert (= subseg_count 2))
(declare-const subseg1_0 String)
(declare-const subseg1_1 String)
(assert (= subseg1_0 (str.split_at seg1 "b" 0)))
(assert (= subseg1_1 (str.split_rest seg1 "b" 1)))
; Cross-dependency: seg0 must be a suffix of subseg1_1
(assert (str.suffixof seg0 subseg1_1))
; The length of seg2 must be greater than the sum of seg0 and subseg1_0
(assert (> (str.len seg2) (+ (str.len seg0) (str.len subseg1_0))))
; Advanced validation: seg0 and seg2 must differ
(assert (not (= seg0 seg2)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
