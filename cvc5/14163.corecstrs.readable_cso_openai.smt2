(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun var_0xINPUT_147214 () String)
(assert (= T_1 (= var_0xINPUT_147214 "Search")))
(assert T_1)

; --- LLM Generated Split Constraints ---
; Split the input string by "|", then split first segment by ",", and relate nested segments
(declare-const pipe_count Int)
(assert (= pipe_count (str.num_splits var_0xINPUT_147214 "|")))
(assert (>= pipe_count 2))
(declare-const pipe_seg0 String)
(declare-const pipe_seg1 String)
(declare-const pipe_rest String)
; First two segments of the "|" split
(assert (= pipe_seg0 (str.split_at var_0xINPUT_147214 "|" 0)))
(assert (= pipe_rest (str.split_rest var_0xINPUT_147214 "|" 1)))
(assert (= pipe_seg1 (str.split_at pipe_rest "|" 0)))
; Split the first pipe segment by ","
(declare-const comma_count Int)
(assert (= comma_count (str.num_splits pipe_seg0 ",")))
(assert (>= comma_count 2))
(declare-const comma0 String)
(declare-const comma1 String)
(declare-const comma_rest String)
(assert (= comma0 (str.split_at pipe_seg0 "," 0)))
(assert (= comma_rest (str.split_rest pipe_seg0 "," 1)))
(assert (= comma1 (str.split_at comma_rest "," 0)))
; Now, split the second pipe segment by ":"
(declare-const colon_count Int)
(assert (= colon_count (str.num_splits pipe_seg1 ":")))
(assert (>= colon_count 2))
(declare-const colon0 String)
(declare-const colon1 String)
(declare-const colon_rest String)
(assert (= colon0 (str.split_at pipe_seg1 ":" 0)))
(assert (= colon_rest (str.split_rest pipe_seg1 ":" 1)))
(assert (= colon1 (str.split_at colon_rest ":" 0)))
; Cross-dependency: Enforce comma1 equals colon0
(assert (= comma1 colon0))
; Advanced validation: The first comma segment must be a prefix of the second colon segment
(assert (str.prefixof comma0 colon1))
; Ensure the lengths of nested segments have a nontrivial relationship
(assert (> (str.len colon1) (str.len comma1)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
