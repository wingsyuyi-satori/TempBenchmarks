(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with domain structure analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with detailed domain structure constraints
(declare-const user_email String)
(declare-const admin_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits admin_email "@") 2))

; ; Extract components for user email
(declare-const user_local String)
(declare-const user_domain String)
(assert (= user_local (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components for admin email
(declare-const admin_local String)
(declare-const admin_domain String)
(assert (= admin_local (str.split_at admin_email "@" 0)))
(assert (= admin_domain (str.split_at admin_email "@" 1)))

; Local parts must be non-empty and have reasonable length
(assert (and (> (str.len user_local) 0) (< (str.len user_local) 65)))
(assert (and (> (str.len admin_local) 0) (< (str.len admin_local) 65)))

; Domain structure validation - must have at least 2 segments
(assert (>= (str.num_splits user_domain ".") 2))
(assert (>= (str.num_splits admin_domain ".") 2))

; ; Check subdomain structure for user domain
(declare-const user_subdomain String)
(declare-const user_main_domain String)
(assert (= user_subdomain (str.split_at user_domain "." 0)))
(assert (= user_main_domain (str.split_rest user_domain "." 1)))

; User subdomain must be non-empty
(assert (> (str.len user_subdomain) 0))

; Main domain part must contain at least one more dot
(assert (>= (str.num_splits user_main_domain ".") 2))

; ; Extract final TLD components
(declare-const user_tld String)
(declare-const admin_tld String)

; ; Get the last segment as TLD by checking domain structure
(declare-const user_domain_segments Int)
(declare-const admin_domain_segments Int)
(assert (= user_domain_segments (str.num_splits user_domain ".")))
(assert (= admin_domain_segments (str.num_splits admin_domain ".")))

; TLD should be the last segment
(assert (= user_tld (str.split_at user_domain "." (- user_domain_segments 1))))
(assert (= admin_tld (str.split_at admin_domain "." (- admin_domain_segments 1))))

; TLD length constraints
(assert (and (>= (str.len user_tld) 2) (<= (str.len user_tld) 6)))
(assert (and (>= (str.len admin_tld) 2) (<= (str.len admin_tld) 6)))

; Admin email must be from same domain as user
(declare-const user_root_domain String)
(declare-const admin_root_domain String)
(assert (= user_root_domain (str.split_rest user_domain "." (- user_domain_segments 2))))
(assert (= admin_root_domain (str.split_rest admin_domain "." (- admin_domain_segments 2))))
(assert (= user_root_domain admin_root_domain))

; No consecutive dots allowed in domains
(assert (not (str.contains user_domain "..")))
(assert (not (str.contains admin_domain "..")))

; Domains cannot start or end with dots
(assert (not (str.prefixof "." user_domain)))
(assert (not (str.suffixof "." user_domain)))
(assert (not (str.prefixof "." admin_domain)))
(assert (not (str.suffixof "." admin_domain)))

(check-sat)
(exit)
(get-model)
