(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV field validation and escape handling
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; TSV record with tab delimiter
(declare-const tsv_record String)

; Pipe-delimited record for comparison
(declare-const pipe_record String)

; Semicolon-delimited record
(declare-const semi_record String)

; TSV must have exactly 4 fields
(assert (= (str.num_splits tsv_record "\t") 4))

; ; Extract TSV fields
(declare-const tsv_name String)
(declare-const tsv_email String)
(declare-const tsv_age String)
(declare-const tsv_department String)
(assert (= tsv_name (str.split_at tsv_record "\t" 0)))
(assert (= tsv_email (str.split_at tsv_record "\t" 1)))
(assert (= tsv_age (str.split_at tsv_record "\t" 2)))
(assert (= tsv_department (str.split_at tsv_record "\t" 3)))

; Pipe record must have at least 5 fields
(assert (>= (str.num_splits pipe_record "|") 5))

; ; Extract first two pipe fields
(declare-const pipe_id String)
(declare-const pipe_status String)
(assert (= pipe_id (str.split_at pipe_record "|" 0)))
(assert (= pipe_status (str.split_at pipe_record "|" 1)))

; Get remaining pipe fields
(declare-const pipe_tail String)
(assert (= pipe_tail (str.split_rest pipe_record "|" 2)))

; Semicolon record constraints
(assert (and (>= (str.num_splits semi_record ";") 2) (<= (str.num_splits semi_record ";") 6)))

; Field validation constraints
; Name field cannot be empty and must not contain tabs
(assert (> (str.len tsv_name) 0))
(assert (not (str.contains tsv_name "\t")))

; Email field must contain @ symbol
(assert (str.contains tsv_email "@"))
(assert (not (str.contains tsv_email "\t")))

; ; Age field must be numeric (simplified check for digits)
(assert (> (str.len tsv_age) 0))
(assert (<= (str.len tsv_age) 3))

; Department field can be empty but no tabs allowed
(assert (not (str.contains tsv_department "\t")))

; Pipe ID must be non-empty and numeric-like
(assert (> (str.len pipe_id) 0))
(assert (<= (str.len pipe_id) 8))

; Status field validation
(assert (or (= pipe_status "active") (= pipe_status "inactive") (= pipe_status "")))

; ; Cross-format constraint: if TSV name equals pipe status, then specific condition
(assert (=> (= tsv_name pipe_status) (> (str.len pipe_tail) 10)))

; Escape handling: no unescaped quotes in any field
(assert (not (str.contains tsv_name """")))
(assert (not (str.contains pipe_status """")))

; Empty field handling: at most one empty field per record
(declare-const empty_count_tsv Int)
(assert (= empty_count_tsv 
 (+ (ite (= tsv_name "") 1 0)
 (ite (= tsv_email "") 1 0)
 (ite (= tsv_age "") 1 0)
 (ite (= tsv_department "") 1 0))))
(assert (<= empty_count_tsv 1))

; Length constraints for data integrity
(assert (<= (str.len tsv_record) 500))
(assert (<= (str.len pipe_record) 300))
(assert (<= (str.len semi_record) 200))

(check-sat)
(get-model)
