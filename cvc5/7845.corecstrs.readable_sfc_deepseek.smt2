(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_502700 () String)
(assert (= T_1 (not (= "" var_0xINPUT_502700))))
(assert T_1)
(assert (= T_2 (= var_0xINPUT_502700 "array")))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Basic split operations on input string
(declare-fun split_part_0 () String)
(declare-fun split_part_1 () String)
(assert (= split_part_0 (str.split_at var_0xINPUT_502700 "a" 0))) ; First segment before 'a'
(assert (= split_part_1 (str.split_at var_0xINPUT_502700 "a" 1))) ; Second segment after first 'a'
; ; Validate split results
(assert (>= (str.len split_part_0) 0)) ; First segment exists
(assert (>= (str.len split_part_1) 0)) ; Second segment exists
; Count expected splits for 'a' delimiter
(assert (>= (str.num_splits var_0xINPUT_502700 "a") 1)) ; At least one split
; Verify remaining segments after first split
(declare-fun remaining_segments () String)
(assert (= remaining_segments (str.split_rest var_0xINPUT_502700 "a" 1))) ; All segments after first split
(assert (str.contains remaining_segments "r")) ; Verify remaining contains 'r' from "array"
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
