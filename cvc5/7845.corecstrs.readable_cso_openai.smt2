(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_502700 () String)
(assert (= T_1 (not (= "" var_0xINPUT_502700))))
(assert T_1)
(assert (= T_2 (= var_0xINPUT_502700 "array")))
(assert T_2)

; --- LLM Generated Split Constraints ---
; ; Split var_0xINPUT_502700 by 'a' and check multiple properties
(declare-const a_split_count Int)
(assert (= a_split_count (str.num_splits var_0xINPUT_502700 "a")))
(assert (= a_split_count 3)) ; "array" splits into ["", "rr", "y"] by "a"
(declare-const a_split0 String)
(declare-const a_split1 String)
(declare-const a_split2 String)
(assert (= a_split0 (str.split_at var_0xINPUT_502700 "a" 0)))
(assert (= a_split1 (str.split_at var_0xINPUT_502700 "a" 1)))
(assert (= a_split2 (str.split_rest var_0xINPUT_502700 "a" 2)))
; Further split middle segment by 'r'
(declare-const r_split_count Int)
(assert (= r_split_count (str.num_splits a_split1 "r")))
(declare-const r_split0 String)
(declare-const r_split1 String)
(assert (= r_split0 (str.split_at a_split1 "r" 0)))
(assert (= r_split1 (str.split_rest a_split1 "r" 1)))
; Cross-dependency: test if a_split2 is a suffix of r_split1
(assert (str.suffixof a_split2 r_split1))
; Advanced validation: combined length and disjointness
(assert (> (str.len a_split1) 1))
(assert (not (= a_split0 a_split2)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
