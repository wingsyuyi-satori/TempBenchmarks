(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun var_0xINPUT_142378 () String)
(assert (= T_1 (not (= "" var_0xINPUT_142378))))
(assert T_1)
(assert (= T_2 (not (= "" var_0xINPUT_142378))))
(assert T_2)
(assert (= T_3 (= var_0xINPUT_142378 "Example:")))
(assert T_3)

; --- LLM Generated Split Constraints ---
; Multi-delimiter splitting with nested dependencies
(declare-const prefix String)
(declare-const suffix String)
(assert (= prefix (str.split_at var_0xINPUT_142378 ":" 0)))
(assert (= suffix (str.split_rest var_0xINPUT_142378 ":" 1)))
; ; Validate prefix structure (must contain at least one "/")
(assert (str.contains prefix "/"))
(declare-const path_segments Int)
(assert (= path_segments (str.num_splits prefix "/")))
(assert (>= path_segments 2))
; ; Extract first and last path components
(declare-const first_path String)
(declare-const last_path String)
(assert (= first_path (str.split_at prefix "/" 0)))
(assert (= last_path (str.split_at prefix "/" (- path_segments 1))))
; ; Cross-validate suffix structure
(assert (str.contains suffix "|"))
(declare-const suffix_parts Int)
(assert (= suffix_parts (str.num_splits suffix "|")))
(assert (>= suffix_parts 3))
; Relationship constraints between splits
(assert (not (str.prefixof first_path last_path)))
(assert (> (str.len suffix) (str.len prefix)))
(assert (str.contains (str.split_at suffix "|" 0) first_path))
; Complex validation on nested splits
(declare-const middle_suffix String)
(assert (= middle_suffix (str.split_at suffix "|" 1)))
(assert (str.contains middle_suffix "#"))
(assert (= (str.num_splits middle_suffix "#") 2))
; Final output must reconstruct original with constraints
(assert (str.contains var_0xINPUT_142378 (str.++ first_path last_path)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
