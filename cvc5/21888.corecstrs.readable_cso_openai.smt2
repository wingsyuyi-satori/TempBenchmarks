(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_5 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun T0_5 () String)
(declare-fun T1_5 () String)
(declare-fun T2_5 () String)
(declare-fun T3_5 () String)
(declare-fun T4_5 () String)
(declare-fun T5_5 () String)
(declare-fun T_1 () Bool)
(declare-fun T_10 () Bool)
(declare-fun T_11 () String)
(declare-fun T_12 () Bool)
(declare-fun T_13 () Bool)
(declare-fun T_14 () String)
(declare-fun T_15 () Bool)
(declare-fun T_16 () String)
(declare-fun T_17 () Bool)
(declare-fun T_18 () String)
(declare-fun T_19 () Bool)
(declare-fun T_1a () String)
(declare-fun T_1b () Bool)
(declare-fun T_1c () String)
(declare-fun T_1d () Bool)
(declare-fun T_1e () String)
(declare-fun T_1f () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_5 () Bool)
(declare-fun T_6 () Bool)
(declare-fun T_7 () String)
(declare-fun T_8 () Bool)
(declare-fun T_9 () String)
(declare-fun T_SELECT_1 () Bool)
(declare-fun T_a () Bool)
(declare-fun T_b () String)
(declare-fun T_c () Bool)
(declare-fun T_d () String)
(declare-fun T_e () Bool)
(declare-fun T_f () String)
(declare-fun var_0xINPUT_49890 () String)
(assert (= T_1 (= "-" var_0xINPUT_49890)))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (= "" var_0xINPUT_49890)))
(assert T_3)
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_5 0)) (= var_0xINPUT_49890 (str.++ T0_5 T1_5)) (= I0_5 (str.len T4_5)) (= 0 (str.len T0_5)) (= T1_5 (str.++ T2_5 T3_5)) (= T2_5 (str.++ T4_5 T5_5)) (= T5_5 "__utmz=218069774.") (not (str.in_re T4_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "z") (str.to_re "=") (str.to_re "2") (str.to_re "1") (str.to_re "8") (str.to_re "0") (str.to_re "6") (str.to_re "9") (str.to_re "7") (str.to_re "7") (str.to_re "4") (str.to_re "."))))) (and (= PCTEMP_LHS_1 (- 1)) (= var_0xINPUT_49890 (str.++ T0_5 T1_5)) (= 0 (str.len T0_5)) (not (str.in_re T1_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "z") (str.to_re "=") (str.to_re "2") (str.to_re "1") (str.to_re "8") (str.to_re "0") (str.to_re "6") (str.to_re "9") (str.to_re "7") (str.to_re "7") (str.to_re "4") (str.to_re ".")))))))
(assert (= T_5 (< (- 1) PCTEMP_LHS_1)))
(assert (= T_6 (not T_5)))
(assert T_6)
(assert (= T_8 (= "-" T_7)))
(assert T_8)
(assert (= T_a (= "-" T_9)))
(assert T_a)
(assert (= T_c (= "-" T_b)))
(assert T_c)
(assert (= T_e (= "-" T_d)))
(assert T_e)
(assert (= T_10 (= "-" T_f)))
(assert T_10)
(assert (= T_12 (= "-" T_11)))
(assert (= T_13 (not T_12)))
(assert T_13)
(assert (= T_15 (= "-" T_14)))
(assert T_15)
(assert (= T_17 (= "-" T_16)))
(assert T_17)
(assert (= T_19 (= "-" T_18)))
(assert T_19)
(assert (= T_1b (= "-" T_1a)))
(assert T_1b)
(assert (= T_1d (= "-" T_1c)))
(assert T_1d)
(assert (= T_1f (= "-" T_1e)))
(assert T_1f)

; --- LLM Generated Split Constraints ---
; Multi-level split on T1_5: first by ';', then each segment by '|'
(declare-fun T1_segments_count () Int)
(assert (= T1_segments_count (str.num_splits T1_5 ";")))
(assert (>= T1_segments_count 3)) ; At least 3 segments after split by ';'
(declare-fun seg0 () String)
(declare-fun seg1 () String)
(declare-fun seg2 () String)
(assert (= seg0 (str.split_at T1_5 ";" 0)))
(assert (= seg1 (str.split_at T1_5 ";" 1)))
(assert (= seg2 (str.split_at T1_5 ";" 2)))
; Nested split: Split seg1 by '|', must have at least 2 parts
(declare-fun seg1_sub0 () String)
(declare-fun seg1_sub1 () String)
(declare-fun seg1_sub_count () Int)
(assert (= seg1_sub_count (str.num_splits seg1 "|")))
(assert (>= seg1_sub_count 2))
(assert (= seg1_sub0 (str.split_at seg1 "|" 0)))
(assert (= seg1_sub1 (str.split_at seg1 "|" 1)))
; Cross-dependency: seg0 must be a prefix of seg1_sub1
(assert (str.prefixof seg0 seg1_sub1))
; Advanced validation: seg2 must be equal to the concatenation of seg1_sub0 and seg0
(assert (= seg2 (str.++ seg1_sub0 seg0)))
; Additional partition: split seg2 by '.'
(declare-fun seg2_dot0 () String)
(declare-fun seg2_dot1 () String)
(assert (= seg2_dot0 (str.split_at seg2 "." 0)))
(assert (= seg2_dot1 (str.split_rest seg2 "." 1)))
; ; Constraint: Length of seg2_dot0 must be less than seg2_dot1, both non-empty
(assert (> (str.len seg2_dot1) (str.len seg2_dot0)))
(assert (> (str.len seg2_dot0) 0))
(assert (> (str.len seg2_dot1) 0))
; Cross-segment dependency: seg2_dot1 must not occur in seg0
(assert (not (str.contains seg0 seg2_dot1)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
