(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun var_0xINPUT_65884 () String)
(assert (= T_1 (not (= "" var_0xINPUT_65884))))
(assert T_1)
(assert (= T_2 (not (= "" var_0xINPUT_65884))))
(assert T_2)
(assert (= T_3 (= var_0xINPUT_65884 "Example:")))
(assert T_3)

; --- LLM Generated Split Constraints ---
; Multi-delimiter splitting with nested validation
(declare-const part1 String)
(declare-const part2 String)
(assert (= part1 (str.split_at var_0xINPUT_65884 ":" 0)))
(assert (= part2 (str.split_rest var_0xINPUT_65884 ":" 1)))
; First part must contain hyphen and be split further
(assert (str.contains part1 "-"))
(declare-const subpart1 String)
(declare-const subpart2 String)
(assert (= subpart1 (str.split_at part1 "-" 0)))
(assert (= subpart2 (str.split_rest part1 "-" 1)))
; Second part must contain slash and be split further
(assert (str.contains part2 "/"))
(declare-const subpart3 String)
(declare-const subpart4 String)
(assert (= subpart3 (str.split_at part2 "/" 0)))
(assert (= subpart4 (str.split_rest part2 "/" 1)))
; Cross-validation between split results
(assert (not (= subpart1 subpart3)))
(assert (str.contains subpart4 subpart2))
; Length constraints across splits
(assert (> (str.len part1) (str.len part2)))
(assert (< (str.len subpart1) (str.len subpart4)))
; Final validation on segment relationships
(assert (str.prefixof subpart1 var_0xINPUT_65884))
(assert (str.suffixof subpart4 var_0xINPUT_65884))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
