(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (re.+ (re.+ (re.+ (re.+ (re.* (re.* (str.to_re "00")))))))) (re.union (re.union (re.* (re.+ (re.+ (re.* (re.union (str.to_re "11") (str.to_re "2")))))) (re.+ (re.union (re.+ (re.union (re.+ (str.to_re "33")) (re.+ (str.to_re "444")))) (re.* (re.* (re.* (str.to_re "555"))))))) (re.+ (re.+ (re.* (re.+ (re.* (re.union (str.to_re "666") (str.to_re "7"))))))))) (re.union (re.union (re.* (re.union (re.* (re.+ (re.* (re.union (str.to_re "8") (str.to_re "9"))))) (re.+ (re.union (re.+ (re.* (str.to_re "a"))) (re.+ (re.union (str.to_re "bb") (str.to_re "ccc"))))))) (re.+ (re.+ (re.union (re.+ (re.union (re.* (str.to_re "d")) (re.* (str.to_re "e")))) (re.* (re.union (re.* (str.to_re "f")) (re.+ (str.to_re "ggg")))))))) (re.+ (re.* (re.+ (re.union (re.union (re.union (re.+ (str.to_re "h")) (re.+ (str.to_re "ii"))) (re.union (re.union (str.to_re "jjj") (str.to_re "kkk")) (re.+ (str.to_re "lll")))) (re.union (re.union (re.+ (str.to_re "mm")) (re.* (str.to_re "n"))) (re.+ (re.union (str.to_re "o") (str.to_re "ppp"))))))))))))
(assert (<= 15 (str.len var0)))

; --- LLM Generated Split Constraints ---
(declare-const var0_first String)
(declare-const var0_second String)
(declare-const var0_rest String)
(assert (= var0_first (str.split_at var0 "a" 0))) ; first segment before first 'a'
(assert (= var0_second (str.split_at var0 "a" 1))) ; segment after first 'a', before second 'a'
(assert (= var0_rest (str.split_rest var0 "a" 1))) ; rest of segments after first split
(assert (>= (str.num_splits var0 "a") 1)) ; at least one split if 'a' is present
; --- End LLM Generated Constraints ---

(check-sat)
(get-model)
