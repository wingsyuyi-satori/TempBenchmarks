(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV field validation with multiple delimiters
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Multi-format data record processing
(declare-const data_record String)
(declare-const format_type String)

; TSV processing variables
(declare-const tsv_field_count Int)
(declare-const tsv_name String)
(declare-const tsv_value String)
(declare-const tsv_metadata String)

; CSV processing variables 
(declare-const csv_field_count Int)
(declare-const csv_header String)
(declare-const csv_body String)

; Pipe-delimited processing variables
(declare-const pipe_segments Int)
(declare-const pipe_first String)
(declare-const pipe_last String)

; TSV format constraints
(assert (= tsv_field_count (str.num_splits data_record "\t")))
(assert (>= tsv_field_count 3))
(assert (= tsv_name (str.split_at data_record "\t" 0)))
(assert (= tsv_value (str.split_at data_record "\t" 1)))
(assert (= tsv_metadata (str.split_rest data_record "\t" 2)))

; TSV field validation
(assert (> (str.len tsv_name) 0))
(assert (not (str.contains tsv_name "\t")))
(assert (or (= tsv_value "") (> (str.len tsv_value) 0)))

; CSV format constraints
(assert (= csv_field_count (str.num_splits data_record ",")))
(assert (<= csv_field_count 10))
(assert (= csv_header (str.split_at data_record "," 0)))
(assert (= csv_body (str.split_rest data_record "," 1)))

; CSV empty field handling
(assert (or (> (str.len csv_header) 0) (str.contains csv_body ",,")))

; Pipe-delimited format constraints
(assert (= pipe_segments (str.num_splits data_record "|")))
(assert (and (>= pipe_segments 2) (<= pipe_segments 5)))
(assert (= pipe_first (str.split_at data_record "|" 0)))
(assert (= pipe_last (str.split_at data_record "|" (- pipe_segments 1))))

; Pipe field validation - no empty first or last fields
(assert (> (str.len pipe_first) 0))
(assert (> (str.len pipe_last) 0))

; Semicolon format validation
(declare-const semi_count Int)
(declare-const semi_middle String)
(assert (= semi_count (str.num_splits data_record ";")))
(assert (>= semi_count 1))
(assert (= semi_middle (str.split_at data_record ";" 1)))

; ; Cross-format consistency check
(assert (or 
 (and (= format_type "TSV") (>= tsv_field_count 3))
 (and (= format_type "CSV") (<= csv_field_count 10))
 (and (= format_type "PIPE") (<= pipe_segments 5))
 (and (= format_type "SEMI") (>= semi_count 1))
))

; Escape sequence handling - no unescaped quotes in any format
(assert (not (str.contains data_record """")))

; Length constraints for data integrity
(assert (and (>= (str.len data_record) 5) (<= (str.len data_record) 1000)))

(check-sat)
(get-model)
