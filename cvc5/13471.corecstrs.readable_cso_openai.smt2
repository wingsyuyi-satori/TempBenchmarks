(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun var_0xINPUT_125573 () String)
(assert (= T_1 (= "aqdYVEFBFA" var_0xINPUT_125573)))
(assert T_1)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_125573 by the delimiter "F"
(declare-const F_parts_count Int)
(assert (= F_parts_count (str.num_splits var_0xINPUT_125573 "F")))
(assert (= F_parts_count 2))
; Get prefix and suffix around first "F"
(declare-const prefixF String)
(declare-const suffixF String)
(assert (= prefixF (str.split_at var_0xINPUT_125573 "F" 0)))
(assert (= suffixF (str.split_rest var_0xINPUT_125573 "F" 1)))
; Nested: Split prefixF by "A"
(declare-const prefixF_A_parts_count Int)
(assert (= prefixF_A_parts_count (str.num_splits prefixF "A")))
(assert (>= prefixF_A_parts_count 2))
(declare-const preA String)
(declare-const postA String)
(assert (= preA (str.split_at prefixF "A" 0)))
(assert (= postA (str.split_rest prefixF "A" 1)))
; Nested: Split suffixF by "D"
(declare-const suffixF_D_parts_count Int)
(assert (= suffixF_D_parts_count (str.num_splits suffixF "D")))
(declare-const sufD_0 String)
(declare-const sufD_1 String)
(assert (= sufD_0 (str.split_at suffixF "D" 0)))
(assert (= sufD_1 (str.split_rest suffixF "D" 1)))
; Cross-dependency: require that postA is a suffix of sufD_1
(assert (str.suffixof postA sufD_1))
; Advanced validation: the concatenation of preA and sufD_0 must not equal to "aqdY"
(assert (not (= (str.++ preA sufD_0) "aqdY")))
; Segment length constraints
(assert (> (str.len preA) 1))
(assert (> (str.len postA) 1))
(assert (> (str.len sufD_1) 0))
(assert (> (str.len sufD_0) 0))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
