(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: PyEx, converted to v2.6 by CVC4
Application: Symbolic Execution of Python Programs
Target solver: CVC4, Z3, Z3str2
Publications: "Scaling Up DPLL(T) String Solvers Using Context-Dependent Simplification" by A. Reynolds, M. Woo, C. Barrett, D. Brumley, T. Liang, and C. Tinelli, CAV 2017.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun key2 () String)
(declare-fun value2 () String)
(assert (and (and (and (and (and (and (and (and (and (and (not (not (not (= (ite (= (str.len (str.substr value2 1 (- (str.len value2) 1))) 0) 1 0) 0)))) (not (= (ite (= (str.at value2 0) " ") 1 0) 0))) (not (not (= (ite (= (str.len value2) 0) 1 0) 0)))) (not (= (ite (= (str.indexof value2 "=" 0) (- 1)) 1 0) 0))) (not (not (= (ite (not (= (str.indexof value2 "=" 0) (- 1))) 1 0) 0)))) (not (not (= (ite (str.contains value2 ",") 1 0) 0)))) (not (not (= (ite (= (str.len value2) 0) 1 0) 0)))) (not (= (ite (= key2 "cache-control") 1 0) 0))) (not (= (ite (= key2 "cache-control") 1 0) 0))) (>= 1 0)) (>= (- (str.len value2) 1) 0)))

; --- LLM Generated Split Constraints ---
; Multi-delimiter hierarchical splitting with cross-validation
(declare-const input_str String)
(assert (>= (str.len input_str) 50))
(assert (str.contains input_str "|"))
(assert (str.contains input_str ":"))
(assert (str.contains input_str ";"))
; First level split by "|" into 3 parts
(declare-const part_a String)
(declare-const part_b String)
(declare-const part_c String)
(assert (= part_a (str.split_at input_str "|" 0)))
(assert (= part_b (str.split_at (str.split_rest input_str "|" 1) "|" 0)))
(assert (= part_c (str.split_rest input_str "|" 2)))
; ; Validate part_a contains ":" and split it
(assert (str.contains part_a ":"))
(declare-const part_a_key String)
(declare-const part_a_val String)
(assert (= part_a_key (str.split_at part_a ":" 0)))
(assert (= part_a_val (str.split_rest part_a ":" 1)))
; Nested split of part_b by ";" with constraints
(assert (>= (str.num_splits part_b ";") 2))
(declare-const part_b_1 String)
(declare-const part_b_2 String)
(assert (= part_b_1 (str.split_at part_b ";" 0)))
(assert (= part_b_2 (str.split_at (str.split_rest part_b ";" 1) ";" 0)))
; Cross-partition relationships
(assert (not (str.prefixof part_a_key part_b_1)))
(assert (str.contains part_c part_a_val))
(assert (<= (str.len part_b_1) (str.len part_b_2)))
; Length constraints with arithmetic
(assert (> (str.len part_c) (+ (str.len part_a) (str.len part_b))))
(assert (= (str.len part_a_key) (- (str.len part_a) (str.len part_a_val) 1)))
; Final validation combining all parts
(assert (str.contains (str.++ part_a_val part_b_2) "valid"))
(assert (not (str.contains (str.++ part_a_key part_b_1 part_c) "invalid")))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
