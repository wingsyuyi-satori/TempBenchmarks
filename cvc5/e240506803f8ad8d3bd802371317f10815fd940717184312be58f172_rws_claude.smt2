(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with domain structure analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with detailed domain analysis
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components from user email
(declare-const username String)
(declare-const user_domain String)
(assert (= username (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components from backup email
(declare-const backup_user String)
(declare-const backup_domain String)
(assert (= backup_user (str.split_at backup_email "@" 0)))
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; Username constraints
(assert (>= (str.len username) 3))
(assert (<= (str.len username) 64))
(assert (>= (str.len backup_user) 1))

; Domain must have at least 2 segments (name.tld)
(assert (>= (str.num_splits user_domain ".") 2))
(assert (>= (str.num_splits backup_domain ".") 2))

; ; Extract first domain segment
(declare-const domain_first String)
(declare-const backup_domain_first String)
(assert (= domain_first (str.split_at user_domain "." 0)))
(assert (= backup_domain_first (str.split_at backup_domain "." 0)))

; Domain segments must be non-empty
(assert (> (str.len domain_first) 0))
(assert (> (str.len backup_domain_first) 0))

; ; Extract everything after first dot in domain
(declare-const domain_suffix String)
(declare-const backup_suffix String)
(assert (= domain_suffix (str.split_rest user_domain "." 1)))
(assert (= backup_suffix (str.split_rest backup_domain "." 1)))

; Suffix must be valid (at least 2 characters for TLD)
(assert (>= (str.len domain_suffix) 2))
(assert (>= (str.len backup_suffix) 2))

; ; Constraint: backup email should be from same domain
(assert (= user_domain backup_domain))

; No consecutive dots in domain
(assert (not (str.contains user_domain "..")))
(assert (not (str.contains backup_domain "..")))

; Domain cannot start or end with dot
(assert (not (str.prefixof "." user_domain)))
(assert (not (str.suffixof "." user_domain)))

(check-sat)
(exit)
(get-model)
