(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_4 () Bool)
(declare-fun var_0xINPUT_107669 () String)
(assert (= T_1 (= "-" var_0xINPUT_107669)))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (= "" var_0xINPUT_107669)))
(assert (= T_4 (not T_3)))
(assert T_4)

; --- LLM Generated Split Constraints ---
; Split the input string var_0xINPUT_107669 by multiple delimiters and create nested/cross-dependent constraints
; Split by delimiter "_"
(declare-const split_u_count Int)
(assert (= split_u_count (str.num_splits var_0xINPUT_107669 "_")))
(assert (>= split_u_count 2))
(declare-const first_u_seg String)
(declare-const rest_u_seg String)
(assert (= first_u_seg (str.split_at var_0xINPUT_107669 "_" 0)))
(assert (= rest_u_seg (str.split_rest var_0xINPUT_107669 "_" 1)))
; Split rest_u_seg by delimiter "-"
(declare-const split_dash_count Int)
(assert (= split_dash_count (str.num_splits rest_u_seg "-")))
(assert (>= split_dash_count 2))
(declare-const dash_head String)
(declare-const dash_tail String)
(assert (= dash_head (str.split_at rest_u_seg "-" 0)))
(assert (= dash_tail (str.split_rest rest_u_seg "-" 1)))
; Nested split: split dash_head by ":"
(declare-const colon_first String)
(declare-const colon_second String)
(assert (= colon_first (str.split_at dash_head ":" 0)))
(assert (= colon_second (str.split_rest dash_head ":" 1)))
; Cross-dependency: constrain relationship between different segments
(assert (not (= first_u_seg colon_first)))
(assert (= (str.len colon_second) (str.len first_u_seg)))
; Advanced validation: ensure dash_tail contains at least one "X"
(assert (str.contains dash_tail "X"))
; Further segment length constraints
(assert (> (str.len dash_head) 2))
(assert (< (str.len dash_tail) (str.len rest_u_seg)))
(assert (> (str.len colon_first) 0))
(assert (> (str.len colon_second) 0))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
