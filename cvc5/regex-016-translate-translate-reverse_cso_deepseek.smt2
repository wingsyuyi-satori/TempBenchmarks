(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (re.* (re.union (str.to_re "YX~M") (str.to_re "321")))))
(assert (= 11 (str.len x)))
(assert (not (= x "YX~M321YX~M")))
(assert (not (= x "321YX~MYX~M")))

; --- LLM Generated Split Constraints ---
; Multi-delimiter splitting with cross-validation
(declare-const x_part1 String)
(declare-const x_part2 String)
(assert (= x_part1 (str.split_at x "~" 0)))
(assert (= x_part2 (str.split_rest x "~" 1)))
; Split first part by "X"
(declare-const x1_left String)
(declare-const x1_right String)
(assert (= x1_left (str.split_at x_part1 "X" 0)))
(assert (= x1_right (str.split_rest x_part1 "X" 1)))
; Split second part by "M"
(declare-const x2_left String)
(declare-const x2_right String)
(assert (= x2_left (str.split_at x_part2 "M" 0)))
(assert (= x2_right (str.split_rest x_part2 "M" 1)))
; Cross-partition constraints
(assert (str.contains x1_left "Y"))
(assert (str.contains x2_left "3"))
(assert (not (str.prefixof x1_left x2_left)))
; Length relationships
(assert (> (str.len x_part1) (str.len x_part2)))
(assert (= (str.len x) (+ (str.len x_part1) (str.len x_part2) 1))) ; account for delimiter
; Dependent split operations on y
(declare-const y_part1 String)
(declare-const y_part2 String)
(assert (= y_part1 (str.split_at y "2" 0)))
(assert (= y_part2 (str.split_rest y "2" 1)))
(assert (str.contains y_part1 x1_right))
(assert (str.contains y_part2 x2_right))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
