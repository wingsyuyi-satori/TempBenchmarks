(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV processing with multiple delimiter support
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Input data record with different delimiter possibilities
(declare-const data_record String)
(declare-const delimiter String)

; Delimiter must be one of the supported separators
(assert (or (= delimiter ",") (= delimiter "\t") (= delimiter ";") (= delimiter "|")))

; Record must have exactly 5 fields
(assert (= (str.num_splits data_record delimiter) 5))

; ; Extract all five fields
(declare-const name_field String)
(declare-const age_field String)
(declare-const email_field String)
(declare-const status_field String)
(declare-const notes_field String)

(assert (= name_field (str.split_at data_record delimiter 0)))
(assert (= age_field (str.split_at data_record delimiter 1)))
(assert (= email_field (str.split_at data_record delimiter 2)))
(assert (= status_field (str.split_at data_record delimiter 3)))
(assert (= notes_field (str.split_at data_record delimiter 4)))

; Name field validation - not empty and no special characters
(assert (> (str.len name_field) 0))
(assert (not (str.contains name_field ",")))
(assert (not (str.contains name_field ";")))

; Age field must be numeric representation (non-empty, digits only conceptually)
(assert (and (> (str.len age_field) 0) (<= (str.len age_field) 3)))

; Email field must contain @ symbol and not be empty
(assert (str.contains email_field "@"))
(assert (> (str.len email_field) 5))

; Status field can be empty or contain specific values
(assert (or (= (str.len status_field) 0) 
 (= status_field "active") 
 (= status_field "inactive") 
 (= status_field "pending")))

; Notes field handling - can be empty but if present, no newlines
(assert (not (str.contains notes_field "\n")))

; Test TSV specific constraint - if using tab delimiter, ensure no tabs in fields
(assert (=> (= delimiter "\t")
 (and (not (str.contains name_field "\t"))
 (not (str.contains email_field "\t"))
 (not (str.contains notes_field "\t")))))

; Pipe delimiter specific constraint - escape handling
(assert (=> (= delimiter "|")
 (and (not (str.contains name_field "|"))
 (not (str.contains status_field "|")))))

; Get the last two fields together for batch processing
(declare-const last_fields String)
(assert (= last_fields (str.split_rest data_record delimiter 3)))

; Ensure the combined last fields contain the delimiter exactly once
(assert (= (str.num_splits last_fields delimiter) 2))

(check-sat)
(get-model)
