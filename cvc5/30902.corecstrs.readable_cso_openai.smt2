(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Int)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_440920 () String)
(assert (= T_1 (str.len var_0xINPUT_440920)))
(assert (= T_2 (= T_1 0)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_440920 by "," into at least 3 segments
(declare-const num_commas Int)
(assert (= num_commas (str.num_splits var_0xINPUT_440920 ",")))
(assert (>= num_commas 3))
; ; Extract the first, second, and rest segments from the split
(declare-const seg0 String)
(declare-const seg1 String)
(declare-const seg2_and_rest String)
(assert (= seg0 (str.split_at var_0xINPUT_440920 "," 0)))
(assert (= seg1 (str.split_at var_0xINPUT_440920 "," 1)))
(assert (= seg2_and_rest (str.split_rest var_0xINPUT_440920 "," 2)))
; Nested split: split seg2_and_rest by "|" into at least 2 pieces
(declare-const num_pipes Int)
(assert (= num_pipes (str.num_splits seg2_and_rest "|")))
(assert (>= num_pipes 2))
(declare-const subseg0 String)
(declare-const subseg1_and_rest String)
(assert (= subseg0 (str.split_at seg2_and_rest "|" 0)))
(assert (= subseg1_and_rest (str.split_rest seg2_and_rest "|" 1)))
; Cross-dependency: seg1 must be a prefix of subseg1_and_rest
(assert (str.prefixof seg1 subseg1_and_rest))
; Advanced validation: seg0 is not a substring of subseg0
(assert (not (str.contains subseg0 seg0)))
; Additional relationship: length of seg0 plus seg1 equals length of subseg0
(assert (= (+ (str.len seg0) (str.len seg1)) (str.len subseg0)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
