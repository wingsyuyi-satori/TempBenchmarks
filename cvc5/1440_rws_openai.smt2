(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based SMT-LIB2 generator
Scenario: Email validation with split operations and different constraints
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Declare the email string variable
(declare-const email String)

; The email string must contain exactly one "@"
(assert (not (= (str.indexof email "@" 0) -1)))

; Split email into user and domain portions
(declare-const user String)
(declare-const domain String)
(assert (= user (str.split_at email "@" 0)))
(assert (= domain (str.split_at email "@" 1)))

; Both user and domain must be non-empty
(assert (> (str.len user) 0))
(assert (> (str.len domain) 0))

; Domain must contain at least one dot, but not start or end with a dot
(assert (>= (str.num_splits domain ".") 2))
(assert (not (= (str.at domain 0) ".")))
(assert (not (= (str.at domain (- (str.len domain) 1)) ".")))

; The top-level domain (TLD) must be at least 2 characters, and not contain a dot
(declare-const tld String)
(declare-const tld_index Int)
(assert (= tld_index (- (str.num_splits domain ".") 1)))
(assert (= tld (str.split_at domain "." tld_index)))
(assert (>= (str.len tld) 2))
(assert (= (str.indexof tld "." 0) -1))

; User part may not contain "@", spaces, or dots at the start or end
(assert (= (str.indexof user "@" 0) -1))
(assert (= (str.indexof user " " 0) -1))
(assert (not (= (str.at user 0) ".")))
(assert (not (= (str.at user (- (str.len user) 1)) ".")))

; ; Example unsatisfiable constraint: domain is exactly "com" (which is not a valid domain)
(assert (not (= domain "com")))

(check-sat)
(exit)
(get-model)
