(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun var_0xINPUT_130912 () String)
(assert (= T_1 (not (= "file:" var_0xINPUT_130912))))
(assert T_1)

; --- LLM Generated Split Constraints ---
; ; Split var_0xINPUT_130912 by "/" and check partitioning
(declare-const slash_count Int)
(assert (= slash_count (str.num_splits var_0xINPUT_130912 "/")))
(assert (>= slash_count 3))
; ; Extract the first segment (protocol) and the rest
(declare-const proto String)
(declare-const after_proto String)
(assert (= proto (str.split_at var_0xINPUT_130912 "/" 0)))
(assert (= after_proto (str.split_rest var_0xINPUT_130912 "/" 1)))
; Further split after_proto by "?" to separate path and query
(declare-const path String)
(declare-const query String)
(assert (= path (str.split_at after_proto "?" 0)))
(assert (= query (str.split_rest after_proto "?" 1)))
; Nested split: split query by "&" (assume at least two parameters)
(declare-const param1 String)
(declare-const param2_and_more String)
(assert (>= (str.num_splits query "&") 2))
(assert (= param1 (str.split_at query "&" 0)))
(assert (= param2_and_more (str.split_rest query "&" 1)))
; Cross-dependency: require that proto is not "file:" and query contains "id="
(assert (not (= proto "file:")))
(assert (str.contains query "id="))
; Advanced validation: param1 must start with "id=" and its value must appear in path
(declare-const id_val String)
(assert (str.prefixof "id=" param1))
(assert (= id_val (str.substr param1 3 (- (str.len param1) 3))))
(assert (str.contains path id_val))
; The number of '/' in var_0xINPUT_130912 must be equal to the number of path segments plus one (for protocol)
(declare-const path_segments Int)
(assert (= path_segments (str.num_splits path "/")))
(assert (= slash_count (+ path_segments 1)))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
