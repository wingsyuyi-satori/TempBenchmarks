(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Multi-format CSV/TSV processing with validation
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Input data records with different delimiters
(declare-const tsv_record String)
(declare-const pipe_record String)
(declare-const semicolon_record String)

; TSV processing - tab-separated values
(declare-const tsv_field_count Int)
(assert (= tsv_field_count (str.num_splits tsv_record " ")))
(assert (= tsv_field_count 4))

; ; Extract TSV fields
(declare-const name_field String)
(declare-const age_field String)
(declare-const department_field String)
(declare-const salary_field String)
(assert (= name_field (str.split_at tsv_record " " 0)))
(assert (= age_field (str.split_at tsv_record " " 1)))
(assert (= department_field (str.split_at tsv_record " " 2)))
(assert (= salary_field (str.split_at tsv_record " " 3)))

; Pipe-delimited record processing
(declare-const pipe_segments Int)
(assert (= pipe_segments (str.num_splits pipe_record "|")))
(assert (>= pipe_segments 5))

; ; Extract key pipe fields
(declare-const product_id String)
(declare-const product_name String)
(declare-const category String)
(assert (= product_id (str.split_at pipe_record "|" 0)))
(assert (= product_name (str.split_at pipe_record "|" 1)))
(assert (= category (str.split_at pipe_record "|" 2)))

; Get optional fields from pipe record
(declare-const optional_data String)
(assert (= optional_data (str.split_rest pipe_record "|" 3)))

; Semicolon-delimited processing
(declare-const semi_field_count Int)
(assert (= semi_field_count (str.num_splits semicolon_record ";")))
(assert (and (>= semi_field_count 2) (<= semi_field_count 6)))

; ; Extract semicolon fields
(declare-const config_key String)
(declare-const config_value String)
(assert (= config_key (str.split_at semicolon_record ";" 0)))
(assert (= config_value (str.split_at semicolon_record ";" 1)))

; Field validation constraints
; Name field cannot be empty
(assert (> (str.len name_field) 0))

; Age field must be numeric (no letters)
(assert (> (str.len age_field) 0))
(assert (not (str.contains age_field "a")))
(assert (not (str.contains age_field "b")))
(assert (not (str.contains age_field "c")))

; Department field has specific values
(assert (or 
 (= department_field "Engineering")
 (= department_field "Sales")
 (= department_field "Marketing")
 (= department_field "")))

; Product ID must not be empty and contain only alphanumeric
(assert (> (str.len product_id) 0))
(assert (not (str.contains product_id " ")))
(assert (not (str.contains product_id ",")))

; Category field validation - no special characters
(assert (not (str.contains category "@")))
(assert (not (str.contains category "#")))
(assert (not (str.contains category "$")))

; Config key cannot contain equals sign (reserved character)
(assert (not (str.contains config_key "=")))

; Empty field handling - salary can be empty but if present must not contain letters
(assert (or 
 (= salary_field "")
 (and 
 (> (str.len salary_field) 0)
 (not (str.contains salary_field "x"))
 (not (str.contains salary_field "y"))
 (not (str.contains salary_field "z")))))

; Cross-format validation - ensure no delimiter mixing
(assert (not (str.contains tsv_record ",")))
(assert (not (str.contains pipe_record " ")))
(assert (not (str.contains semicolon_record "|")))

; Escape sequence handling - no unescaped quotes in fields
(assert (not (str.contains product_name """")))
(assert (not (str.contains config_value """")))

(check-sat)
(get-model)
