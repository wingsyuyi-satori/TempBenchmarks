(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
Description: transformed by StringFuzz, a modular string and regex fuzzer, from an industrial benchmark
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-const x String)
(declare-const y String)
(assert (str.in_re x (re.* (str.to_re "vvVVLLww"))))
(assert (str.in_re x (re.* (str.to_re "vvVVLLwwvvVVLLww"))))
(assert (> (str.len x) 40))
(assert (< (str.len x) 50))

; --- LLM Generated Split Constraints ---
; Split x by "LL" into at least 3 segments
(declare-const LL_parts_count Int)
(assert (= LL_parts_count (str.num_splits x "LL")))
(assert (>= LL_parts_count 3))
; Take the first segment before first "LL"
(declare-const seg1 String)
(assert (= seg1 (str.split_at x "LL" 0)))
; Take the second segment (between first and second "LL")
(declare-const seg2 String)
(assert (= seg2 (str.split_at x "LL" 1)))
; Split seg2 by "ww" into at least 2 parts
(declare-const ww_parts_count Int)
(assert (= ww_parts_count (str.num_splits seg2 "ww")))
(assert (>= ww_parts_count 2))
(declare-const ww_seg1 String)
(declare-const ww_seg2 String)
(assert (= ww_seg1 (str.split_at seg2 "ww" 0)))
(assert (= ww_seg2 (str.split_at seg2 "ww" 1)))
; Nested split: split seg1 by "VV"
(declare-const vv_parts_count_seg1 Int)
(assert (= vv_parts_count_seg1 (str.num_splits seg1 "VV")))
(assert (>= vv_parts_count_seg1 2))
(declare-const vvseg1 String)
(declare-const vvseg2 String)
(assert (= vvseg1 (str.split_at seg1 "VV" 0)))
(assert (= vvseg2 (str.split_at seg1 "VV" 1)))
; Cross dependency: require that the ww_seg1 from seg2 equals vvseg2 from seg1
(assert (= ww_seg1 vvseg2))
; Advanced validation: the length of ww_seg2 must be exactly twice that of vvseg1
(assert (= (str.len ww_seg2) (str.len vvseg1)))
; Relate split segments to y: require y to be a prefix of seg2 and not a suffix of seg1
(assert (str.prefixof y seg2))
(assert (not (str.suffixof y seg1)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
