(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV processing with multiple delimiters
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Multi-format data processing with different delimiters
(declare-const data_record String)
(declare-const format_type String)

; TSV processing variables
(declare-const tsv_name String)
(declare-const tsv_age String)
(declare-const tsv_email String)
(declare-const tsv_department String)

; CSV processing variables 
(declare-const csv_id String)
(declare-const csv_product String)
(declare-const csv_price String)

; Pipe-separated processing variables
(declare-const pipe_user String)
(declare-const pipe_role String)
(declare-const pipe_permissions String)

; Format detection and processing
(assert (or 
 (= format_type "TSV")
 (= format_type "CSV") 
 (= format_type "PIPE")))

; TSV format constraints (tab-separated)
(assert (=> (= format_type "TSV")
 (and
 (= (str.num_splits data_record "\t") 4)
 (= tsv_name (str.split_at data_record "\t" 0))
 (= tsv_age (str.split_at data_record "\t" 1))
 (= tsv_email (str.split_at data_record "\t" 2))
 (= tsv_department (str.split_at data_record "\t" 3))
 ; Name field validation
 (and (> (str.len tsv_name) 0) (< (str.len tsv_name) 50))
 ; Age must be numeric representation (2-3 digits)
 (and (>= (str.len tsv_age) 1) (<= (str.len tsv_age) 3))
 ; Email must contain @ symbol
 (str.contains tsv_email "@")
 ; Department cannot be empty
 (> (str.len tsv_department) 0))))

; CSV format constraints (comma-separated)
(assert (=> (= format_type "CSV")
 (and
 (>= (str.num_splits data_record ",") 3)
 (= csv_id (str.split_at data_record "," 0))
 (= csv_product (str.split_at data_record "," 1))
 (= csv_price (str.split_at data_record "," 2))
 ; ID field must be numeric (non-empty)
 (> (str.len csv_id) 0)
 ; Product name constraints
 (and (> (str.len csv_product) 0) (< (str.len csv_product) 100))
 ; Price field validation (must have decimal point)
 (str.contains csv_price ".")
 ; No embedded commas in fields
 (not (str.contains csv_product ","))
 (not (str.contains csv_price ",")))))

; Pipe-separated format constraints
(assert (=> (= format_type "PIPE")
 (and
 (= (str.num_splits data_record "|") 3)
 (= pipe_user (str.split_at data_record "|" 0))
 (= pipe_role (str.split_at data_record "|" 1))
 (= pipe_permissions (str.split_at data_record "|" 2))
 ; User field cannot be empty
 (> (str.len pipe_user) 0)
 ; Role must be one of predefined values
 (or (= pipe_role "admin") (= pipe_role "user") (= pipe_role "guest"))
 ; Permissions can be empty (guest users)
 (>= (str.len pipe_permissions) 0))))

; Cross-format validation: ensure no delimiter mixing
(assert (=> (= format_type "TSV")
 (and (not (str.contains data_record ","))
 (not (str.contains data_record "|"))
 (not (str.contains data_record ";")))))

(assert (=> (= format_type "CSV")
 (and (not (str.contains data_record "\t"))
 (not (str.contains data_record "|"))
 (not (str.contains data_record ";")))))

(assert (=> (= format_type "PIPE")
 (and (not (str.contains data_record ","))
 (not (str.contains data_record "\t"))
 (not (str.contains data_record ";")))))

; Empty field handling - semicolon format test
(declare-const semi_data String)
(declare-const semi_field1 String)
(declare-const semi_field2 String)
(declare-const semi_field3 String)

; Semicolon-separated with potential empty fields
(assert (= (str.num_splits semi_data ";") 3))
(assert (= semi_field1 (str.split_at semi_data ";" 0)))
(assert (= semi_field2 (str.split_at semi_data ";" 1)))
(assert (= semi_field3 (str.split_at semi_data ";" 2)))

; Allow empty middle field but not first or last
(assert (> (str.len semi_field1) 0))
(assert (>= (str.len semi_field2) 0))
(assert (> (str.len semi_field3) 0))

; Escape sequence validation - no unescaped quotes in any format
(assert (not (str.contains data_record """")))
(assert (not (str.contains semi_data """")))

(check-sat)
(exit)
(get-model)
