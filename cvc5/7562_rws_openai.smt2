(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Scenario: CSV/TSV field separation and validation with various delimiters
Target solvers: Z3str3, CVC4, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; TSV line processing (tab-separated)
(declare-const tsv_line String)

; Ensure exactly 5 fields in the TSV line
(assert (= (str.num_splits tsv_line "\t") 5))

; ; Extract the fields
(declare-const tsv_f0 String)
(declare-const tsv_f1 String)
(declare-const tsv_f2 String)
(declare-const tsv_f3 String)
(declare-const tsv_f4 String)

(assert (= tsv_f0 (str.split_at tsv_line "\t" 0)))
(assert (= tsv_f1 (str.split_at tsv_line "\t" 1)))
(assert (= tsv_f2 (str.split_at tsv_line "\t" 2)))
(assert (= tsv_f3 (str.split_at tsv_line "\t" 3)))
(assert (= tsv_f4 (str.split_at tsv_line "\t" 4)))

; The third field must be empty (testing empty field handling)
(assert (= tsv_f2 ""))

; The last field must be non-empty and must not contain the tab delimiter
(assert (> (str.len tsv_f4) 0))
(assert (not (str.contains tsv_f4 "\t")))

; Now process a pipe-separated line
(declare-const ps_line String)

; Ensure at least 2 fields in the pipe-separated line
(assert (>= (str.num_splits ps_line "|") 2))

; ; Extract the first two fields
(declare-const ps_f0 String)
(declare-const ps_f1 String)
(assert (= ps_f0 (str.split_at ps_line "|" 0)))
(assert (= ps_f1 (str.split_at ps_line "|" 1)))

; Disallow escape characters in the first field
(assert (not (str.contains ps_f0 "\\")))

; The first field must not be empty, the second may be empty
(assert (> (str.len ps_f0) 0))

; Unsat case: assert the same line parsed as semicolon-delimited has fewer fields than as comma-delimited, which is impossible if the delimiters are different characters and the line is the same
(declare-const multi_line String)
(assert (< (str.num_splits multi_line ";") (str.num_splits multi_line ",")))

(check-sat)
(get-model)
