(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with subdomain analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Email validation with subdomain structure analysis
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have valid @ structure
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components for user_email
(declare-const user_local String)
(declare-const user_domain String)
(assert (= user_local (str.split_at user_email "@" 0)))
(assert (= user_domain (str.split_at user_email "@" 1)))

; ; Extract components for backup_email
(declare-const backup_local String)
(declare-const backup_domain String)
(assert (= backup_local (str.split_at backup_email "@" 0)))
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; Domain structure validation - must have at least 2 segments
(declare-const user_domain_segments Int)
(declare-const backup_domain_segments Int)
(assert (= user_domain_segments (str.num_splits user_domain ".")))
(assert (= backup_domain_segments (str.num_splits backup_domain ".")))
(assert (>= user_domain_segments 2))
(assert (>= backup_domain_segments 2))

; Subdomain analysis for user_domain
(declare-const user_subdomain String)
(declare-const user_main_domain String)
(assert (= user_subdomain (str.split_at user_domain "." 0)))
(assert (= user_main_domain (str.split_rest user_domain "." 1)))

; All segments must be non-empty
(assert (> (str.len user_local) 0))
(assert (> (str.len backup_local) 0))
(assert (> (str.len user_subdomain) 0))
(assert (> (str.len user_main_domain) 0))

; Domain validation - no consecutive dots
(assert (not (str.contains user_domain "..")))
(assert (not (str.contains backup_domain "..")))

; ; Constraint: backup email domain should have more segments than user email
(assert (> backup_domain_segments user_domain_segments))

; ; TLD extraction and validation
(declare-const user_tld String)
(declare-const backup_tld String)
(assert (= user_tld (str.split_at user_domain "." (- user_domain_segments 1))))
(assert (= backup_tld (str.split_at backup_domain "." (- backup_domain_segments 1))))

; TLD length constraints
(assert (>= (str.len user_tld) 2))
(assert (<= (str.len user_tld) 6))
(assert (>= (str.len backup_tld) 2))
(assert (<= (str.len backup_tld) 6))

; Different domains constraint
(assert (not (= user_domain backup_domain)))

(check-sat)
(exit)
(get-model)
