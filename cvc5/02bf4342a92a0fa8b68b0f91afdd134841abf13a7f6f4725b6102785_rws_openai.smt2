(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation scenario (variant)
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Declare the email string variable
(declare-const user_email String)

; The email must have exactly one "@" symbol
(assert (= (str.num_splits user_email "@") 2))

; ; Extract username and domain from email
(declare-const username String)
(declare-const domain_full String)
(assert (= username (str.split_at user_email "@" 0)))
(assert (= domain_full (str.split_at user_email "@" 1)))

; Username must not start or end with a period
(assert (not (= (str.at username 0) ".")))
(assert (not (= (str.at username (- (str.len username) 1)) ".")))

; Domain must contain at least one "."
(assert (>= (str.num_splits domain_full ".") 2))

; ; Extract subdomain (optional), domain, and tld if present
(declare-const domain_label String)
(declare-const tld_label String)
(assert (= domain_label (str.split_at domain_full "." 0)))
(assert (= tld_label (str.split_at domain_full "." 1)))

; Domain label (before first dot) must be non-empty and not "localhost"
(assert (> (str.len domain_label) 0))
(assert (not (= domain_label "localhost")))

; TLD must be at least 2 characters
(assert (>= (str.len tld_label) 2))

; Forbid consecutive dots in user_email (unsatisfiable constraint)
(assert (not (str.contains user_email "..")))

; ; Example: Forbid email ending with a period (unsatisfiable if domain ends with ".")
(assert (not (= (str.at user_email (- (str.len user_email) 1)) ".")))

(check-sat)
(exit)
(get-model)
