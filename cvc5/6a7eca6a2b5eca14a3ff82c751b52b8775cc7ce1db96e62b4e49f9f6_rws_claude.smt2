(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: CSV/TSV processing with multiple delimiter support
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Input data records with different delimiters
(declare-const tsv_record String)
(declare-const psv_record String)
(declare-const csv_header String)

; TSV record processing (tab-separated)
(declare-const tsv_field_count Int)
(assert (= tsv_field_count (str.num_splits tsv_record " ")))
(assert (= tsv_field_count 5))

; ; Extract TSV fields
(declare-const tsv_name String)
(declare-const tsv_age String)
(declare-const tsv_email String)
(declare-const tsv_phone String)
(declare-const tsv_address String)
(assert (= tsv_name (str.split_at tsv_record " " 0)))
(assert (= tsv_age (str.split_at tsv_record " " 1)))
(assert (= tsv_email (str.split_at tsv_record " " 2)))
(assert (= tsv_phone (str.split_at tsv_record " " 3)))
(assert (= tsv_address (str.split_at tsv_record " " 4)))

; PSV record processing (pipe-separated)
(declare-const psv_field_count Int)
(assert (= psv_field_count (str.num_splits psv_record "|")))
(assert (>= psv_field_count 4))

; ; Extract PSV core fields
(declare-const psv_id String)
(declare-const psv_category String)
(declare-const psv_value String)
(declare-const psv_metadata String)
(assert (= psv_id (str.split_at psv_record "|" 0)))
(assert (= psv_category (str.split_at psv_record "|" 1)))
(assert (= psv_value (str.split_at psv_record "|" 2)))
(assert (= psv_metadata (str.split_rest psv_record "|" 3)))

; CSV header validation (semicolon-separated)
(declare-const header_field_count Int)
(assert (= header_field_count (str.num_splits csv_header ";")))
(assert (= header_field_count 6))

(declare-const header_first String)
(declare-const header_last String)
(assert (= header_first (str.split_at csv_header ";" 0)))
(assert (= header_last (str.split_at csv_header ";" 5)))

; Field validation constraints
; TSV name field must not be empty and contain only letters/spaces
(assert (> (str.len tsv_name) 0))
(assert (not (str.contains tsv_name " ")))

; TSV age must be numeric (no letters)
(assert (> (str.len tsv_age) 0))
(assert (not (str.contains tsv_age "a")))
(assert (not (str.contains tsv_age "z")))

; TSV email must contain @ symbol
(assert (str.contains tsv_email "@"))

; PSV ID must not be empty
(assert (> (str.len psv_id) 0))

; PSV category must be from predefined set
(assert (or 
 (= psv_category "A")
 (= psv_category "B") 
 (= psv_category "C")))

; PSV value field can be empty (optional)
(assert (>= (str.len psv_value) 0))

; Header fields must not contain delimiters
(assert (not (str.contains header_first ";")))
(assert (not (str.contains header_last ";")))

; Empty field handling - ensure no consecutive delimiters in TSV
(assert (not (str.contains tsv_record " ")))

; Escape handling - ensure no unescaped quotes in PSV metadata
(assert (not (str.contains psv_metadata "|")))

; Cross-validation between records
(assert (= (str.len tsv_name) (str.len psv_id)))

(check-sat)
(exit)
(get-model)
