(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Int)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_440920 () String)
(assert (= T_1 (str.len var_0xINPUT_440920)))
(assert (= T_2 (= T_1 0)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Basic split operations on input string
(declare-fun split_part_0 () String)
(declare-fun split_part_1 () String)
(assert (= split_part_0 (str.split_at var_0xINPUT_440920 " " 0))) ; First segment when splitting by space
(assert (= split_part_1 (str.split_at var_0xINPUT_440920 " " 1))) ; Second segment when splitting by space
; ; Validate split results
(assert (=> (not (= T_1 0)) (> (str.len split_part_0) 0))) ; Non-empty input should have at least one segment
(assert (<= (str.num_splits var_0xINPUT_440920 " ") 2)) ; Limit to max 2 segments for simplicity
; Additional constraint if input is non-empty
(assert (=> (> T_1 0) (str.contains var_0xINPUT_440920 " "))) ; Non-empty input should contain space if we're splitting by it
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
