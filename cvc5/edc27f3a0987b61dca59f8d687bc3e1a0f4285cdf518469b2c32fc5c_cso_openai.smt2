(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: PyEx, converted to v2.6 by CVC4
Application: Symbolic Execution of Python Programs
Target solver: CVC4, Z3, Z3str2
Publications: "Scaling Up DPLL(T) String Solvers Using Context-Dependent Simplification" by A. Reynolds, M. Woo, C. Barrett, D. Brumley, T. Liang, and C. Tinelli, CAV 2017.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun key2 () String)
(declare-fun value2 () String)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (not (not (= (ite (= (str.at (str.substr value2 1 (- (str.len value2) 1)) 0) "\u{9}") 1 0) 0)))) (not (not (= (ite (= (str.at (str.substr value2 1 (- (str.len value2) 1)) 0) " ") 1 0) 0)))) (not (not (= (ite (= (str.len (str.substr value2 1 (- (str.len value2) 1))) 0) 1 0) 0)))) (not (= (ite (= (str.at value2 0) "\u{b}") 1 0) 0))) (not (not (= (ite (= (str.at value2 0) "\u{d}") 1 0) 0)))) (not (not (= (ite (= (str.at value2 0) "\u{a}") 1 0) 0)))) (not (not (= (ite (= (str.at value2 0) "\u{9}") 1 0) 0)))) (not (not (= (ite (= (str.at value2 0) " ") 1 0) 0)))) (not (not (= (ite (= (str.len value2) 0) 1 0) 0)))) (not (= (ite (= (str.indexof value2 "=" 0) (- 1)) 1 0) 0))) (not (not (= (ite (not (= (str.indexof value2 "=" 0) (- 1))) 1 0) 0)))) (not (not (= (ite (str.contains value2 ",") 1 0) 0)))) (not (not (= (ite (= (str.len value2) 0) 1 0) 0)))) (not (= (ite (= key2 "cache-control") 1 0) 0))) (not (= (ite (= key2 "cache-control") 1 0) 0))) (>= 1 0)) (>= (- (str.len value2) 1) 0)) (>= 1 0)) (>= (- (str.len value2) 1) 0)) (>= 1 0)) (>= (- (str.len value2) 1) 0)))

; --- LLM Generated Split Constraints ---
; ; Assume key2 and value2 are extracted from a "key=value" substring of a larger header string
(declare-fun header () String)
; 1. header may contain multiple fields separated by ";"
(declare-fun field1 () String)
(declare-fun rest_fields () String)
(assert (= field1 (str.split_at header ";" 0)))
(assert (= rest_fields (str.split_rest header ";" 1)))
; 2. field1 is further split on "=", producing key2 and value2
(assert (= key2 (str.split_at field1 "=" 0)))
(assert (= value2 (str.split_rest field1 "=" 1)))
; 3. Nested split: rest_fields may itself contain a field split by ","
(declare-fun rest1_first () String)
(declare-fun rest1_rest () String)
(assert (= rest1_first (str.split_at rest_fields "," 0)))
(assert (= rest1_rest (str.split_rest rest_fields "," 1)))
; 4. Cross-dependency: require that value2 is a substring of either rest1_first or rest1_rest
(assert (or (str.contains rest1_first value2) (str.contains rest1_rest value2)))
; 5. Advanced validation: enforce that key2 is not contained in any field after the first
(assert (and (not (str.contains rest1_first key2)) (not (str.contains rest1_rest key2))))
; 6. Additional relationship: value2 must not be equal to rest1_first, but must be a prefix of rest1_rest
(assert (and (not (= value2 rest1_first)) (str.prefixof value2 rest1_rest)))
; 7. Length relationship: sum of lengths of key2 and value2 is less than field1
(assert (< (+ (str.len key2) (str.len value2)) (str.len field1)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
