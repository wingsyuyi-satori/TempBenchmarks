(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_188781 () String)
(assert (= T_1 (not (= "" var_0xINPUT_188781))))
(assert (= T_2 (not T_1)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Multi-partition split: split input on "-"
(declare-const dash_count Int)
(assert (= dash_count (str.num_splits var_0xINPUT_188781 "-")))
(assert (>= dash_count 3))
(declare-const seg1 String)
(declare-const seg2 String)
(declare-const seg3 String)
(declare-const seg4_rest String)
(assert (= seg1 (str.split_at var_0xINPUT_188781 "-" 0)))
(assert (= seg2 (str.split_at var_0xINPUT_188781 "-" 1)))
(assert (= seg3 (str.split_at var_0xINPUT_188781 "-" 2)))
(assert (= seg4_rest (str.split_rest var_0xINPUT_188781 "-" 3)))
; Nested split: further split seg2 on ":"
(declare-const seg2_pre String)
(declare-const seg2_post String)
(assert (= seg2_pre (str.split_at seg2 ":" 0)))
(assert (= seg2_post (str.split_rest seg2 ":" 1)))
; Cross-dependency: seg2_pre should occur in seg3
(assert (str.contains seg3 seg2_pre))
; Advanced validation: seg2_post is a prefix of seg4_rest
(assert (str.prefixof seg2_post seg4_rest))
; seg1 and seg3 must differ
(assert (not (= seg1 seg3)))
; seg4_rest must contain at least one "_"
(assert (str.contains seg4_rest "_"))
; Length constraints for complexity
(assert (< (str.len seg2_pre) (str.len seg2_post)))
(assert (> (str.len seg3) 2))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
