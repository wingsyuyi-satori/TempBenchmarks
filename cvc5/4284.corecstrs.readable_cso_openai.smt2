(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun var_0xINPUT_65884 () String)
(assert (= T_1 (not (= "" var_0xINPUT_65884))))
(assert T_1)
(assert (= T_2 (not (= "" var_0xINPUT_65884))))
(assert T_2)
(assert (= T_3 (= var_0xINPUT_65884 "Example:")))
(assert T_3)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_65884 by colon (":") and underscore ("_")
(declare-const parts_by_colon_count Int)
(declare-const parts_by_underscore_count Int)
(assert (= parts_by_colon_count (str.num_splits var_0xINPUT_65884 ":")))
(assert (= parts_by_underscore_count (str.num_splits var_0xINPUT_65884 "_")))
; Enforce at least 2 parts for both delimiters
(assert (>= parts_by_colon_count 2))
(assert (>= parts_by_underscore_count 2))
; ; Extract first and second part from colon split
(declare-const colon_first String)
(declare-const colon_second String)
(assert (= colon_first (str.split_at var_0xINPUT_65884 ":" 0)))
(assert (= colon_second (str.split_at var_0xINPUT_65884 ":" 1)))
; ; Extract first part from underscore split
(declare-const underscore_first String)
(assert (= underscore_first (str.split_at var_0xINPUT_65884 "_" 0)))
; Nested split: split colon_first by hyphen ("-")
(declare-const nest1_first String)
(declare-const nest1_second String)
(assert (= nest1_first (str.split_at colon_first "-" 0)))
(assert (= nest1_second (str.split_at colon_first "-" 1)))
; Cross dependencies: underscore_first must equal nest1_first
(assert (= underscore_first nest1_first))
; Advanced validation: enforce length and containment constraints
(assert (> (str.len colon_second) (str.len nest1_second)))
(assert (str.contains colon_second nest1_first))
(assert (not (= nest1_second "")))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
