(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun T_1 () Bool)
(declare-fun T_2 () Bool)
(declare-fun var_0xINPUT_88630 () String)
(assert (= T_1 (= var_0xINPUT_88630 "")))
(assert (= T_2 (not T_1)))
(assert T_2)

; --- LLM Generated Split Constraints ---
; Split var_0xINPUT_88630 on delimiter "-"
(declare-const seg_count Int)
(assert (= seg_count (str.num_splits var_0xINPUT_88630 "-")))
(assert (>= seg_count 3))
; ; Extract first, second, and rest segments after split
(declare-const seg0 String)
(declare-const seg1 String)
(declare-const seg2_rest String)
(assert (= seg0 (str.split_at var_0xINPUT_88630 "-" 0)))
(assert (= seg1 (str.split_at var_0xINPUT_88630 "-" 1)))
(assert (= seg2_rest (str.split_rest var_0xINPUT_88630 "-" 2)))
; Further split seg2_rest by ":"
(declare-const subseg_count Int)
(assert (= subseg_count (str.num_splits seg2_rest ":")))
(assert (>= subseg_count 2))
(declare-const subseg0 String)
(declare-const subseg1 String)
(assert (= subseg0 (str.split_at seg2_rest ":" 0)))
(assert (= subseg1 (str.split_at seg2_rest ":" 1)))
; Cross-dependency: seg1 equals subseg1 reversed
; Advanced validation: seg0 and subseg0 must be different and have similar lengths
(assert (not (= seg0 subseg0)))
(assert (<= (str.len seg0) (+ 1 (str.len subseg0))))
(assert (>= (str.len seg0) (- (str.len subseg0) 1)))
; Advanced validation: seg1 is not a substring of seg0
(assert (not (str.contains seg0 seg1)))
; --- End LLM Generated Constraints ---

(check-sat)

(get-model)
