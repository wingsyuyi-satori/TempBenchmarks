(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with strict domain requirements
Target solver: CVC4, Z3, Z3str3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Strict email validation scenario
(declare-const user_email String)

; Basic email structure constraints
(assert (str.contains user_email "@"))
(assert (not (str.prefixof "@" user_email)))
(assert (not (str.suffixof "@" user_email)))

; Split into local and domain parts
(declare-const local String)
(declare-const domain String)
(assert (= local (str.split_at user_email "@" 0)))
(assert (= domain (str.split_at user_email "@" 1)))

; Local part constraints
(assert (>= (str.len local) 1))
(assert (<= (str.len local) 64)) ; RFC 5321 limit
(assert (not (str.contains local ".."))) ; No consecutive dots

; Domain part must have at least one dot
(assert (str.contains domain "."))
(assert (>= (str.num_splits domain ".") 2))

; Domain segment constraints
(declare-const domain_segments Int)
(assert (= domain_segments (str.num_splits domain ".")))

; Each domain segment must be 1-63 chars and alphanumeric
(declare-const seg1 String)
(declare-const seg2 String)
(assert (= seg1 (str.split_at domain "." 0)))
(assert (= seg2 (str.split_at domain "." 1)))
(assert (and (>= (str.len seg1) 1) (<= (str.len seg1) 63)))
(assert (and (>= (str.len seg2) 2) (<= (str.len seg2) 63))) ; TLD min 2 chars

; Top-level domain must be letters only
(assert (str.is_digit (str.at seg2 0))) ; First char must be letter
(assert (not (str.contains seg2 "0123456789"))) ; No digits in TLD

; Additional constraints for common email patterns
(assert (not (str.contains local "@")))
(assert (not (str.contains domain "@")))
(assert (not (str.contains user_email " ")))

; ; Example unsatisfiable case - email cannot be exactly "a@b.c"
(assert (not (= user_email "a@b.c")))

(check-sat)
(get-model)
