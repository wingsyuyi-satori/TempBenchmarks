(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2018-04-25
Generator: Kudzu, converted to v2.6 by CVC4
Application: Symbolic Execution of Javascript
Target solver: Kaluza
Publications: "A symbolic execution framework for JavaScript" by P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, 2010.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)



(declare-fun I0_5 () Int)
(declare-fun PCTEMP_LHS_1 () Int)
(declare-fun T0_5 () String)
(declare-fun T1_5 () String)
(declare-fun T2_5 () String)
(declare-fun T3_5 () String)
(declare-fun T4_5 () String)
(declare-fun T5_5 () String)
(declare-fun T_1 () Bool)
(declare-fun T_10 () Bool)
(declare-fun T_11 () String)
(declare-fun T_12 () Bool)
(declare-fun T_13 () Bool)
(declare-fun T_14 () String)
(declare-fun T_15 () Bool)
(declare-fun T_16 () String)
(declare-fun T_17 () Bool)
(declare-fun T_18 () String)
(declare-fun T_19 () Bool)
(declare-fun T_1a () String)
(declare-fun T_1b () Bool)
(declare-fun T_1c () String)
(declare-fun T_1d () Bool)
(declare-fun T_1e () String)
(declare-fun T_1f () Bool)
(declare-fun T_2 () Bool)
(declare-fun T_3 () Bool)
(declare-fun T_5 () Bool)
(declare-fun T_6 () Bool)
(declare-fun T_7 () String)
(declare-fun T_8 () Bool)
(declare-fun T_9 () String)
(declare-fun T_SELECT_1 () Bool)
(declare-fun T_a () Bool)
(declare-fun T_b () String)
(declare-fun T_c () Bool)
(declare-fun T_d () String)
(declare-fun T_e () Bool)
(declare-fun T_f () String)
(declare-fun var_0xINPUT_49890 () String)
(assert (= T_1 (= "-" var_0xINPUT_49890)))
(assert (= T_2 (not T_1)))
(assert T_2)
(assert (= T_3 (= "" var_0xINPUT_49890)))
(assert T_3)
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_1 (- 1)))))
(assert (ite T_SELECT_1 (and (= PCTEMP_LHS_1 (+ I0_5 0)) (= var_0xINPUT_49890 (str.++ T0_5 T1_5)) (= I0_5 (str.len T4_5)) (= 0 (str.len T0_5)) (= T1_5 (str.++ T2_5 T3_5)) (= T2_5 (str.++ T4_5 T5_5)) (= T5_5 "__utmz=218069774.") (not (str.in_re T4_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "z") (str.to_re "=") (str.to_re "2") (str.to_re "1") (str.to_re "8") (str.to_re "0") (str.to_re "6") (str.to_re "9") (str.to_re "7") (str.to_re "7") (str.to_re "4") (str.to_re "."))))) (and (= PCTEMP_LHS_1 (- 1)) (= var_0xINPUT_49890 (str.++ T0_5 T1_5)) (= 0 (str.len T0_5)) (not (str.in_re T1_5 (re.++ (str.to_re "_") (str.to_re "_") (str.to_re "u") (str.to_re "t") (str.to_re "m") (str.to_re "z") (str.to_re "=") (str.to_re "2") (str.to_re "1") (str.to_re "8") (str.to_re "0") (str.to_re "6") (str.to_re "9") (str.to_re "7") (str.to_re "7") (str.to_re "4") (str.to_re ".")))))))
(assert (= T_5 (< (- 1) PCTEMP_LHS_1)))
(assert (= T_6 (not T_5)))
(assert T_6)
(assert (= T_8 (= "-" T_7)))
(assert T_8)
(assert (= T_a (= "-" T_9)))
(assert T_a)
(assert (= T_c (= "-" T_b)))
(assert T_c)
(assert (= T_e (= "-" T_d)))
(assert T_e)
(assert (= T_10 (= "-" T_f)))
(assert T_10)
(assert (= T_12 (= "-" T_11)))
(assert (= T_13 (not T_12)))
(assert T_13)
(assert (= T_15 (= "-" T_14)))
(assert T_15)
(assert (= T_17 (= "-" T_16)))
(assert T_17)
(assert (= T_19 (= "-" T_18)))
(assert T_19)
(assert (= T_1b (= "-" T_1a)))
(assert T_1b)
(assert (= T_1d (= "-" T_1c)))
(assert T_1d)
(assert (= T_1f (= "-" T_1e)))
(assert T_1f)

; --- LLM Generated Split Constraints ---
; Multi-delimiter hierarchical splitting with cross-validation
(declare-const input_str String)
(assert (str.contains input_str "|"))
(assert (str.contains input_str ";"))
(assert (str.contains input_str ":"))
(assert (> (str.len input_str) 30))
; First level split by "|"
(declare-const part1 String)
(declare-const part2 String)
(assert (= part1 (str.substr input_str 0 (str.indexof input_str "|" 0))))
(assert (= part2 (str.substr input_str (+ (str.indexof input_str "|" 0) 1) (- (str.len input_str) (+ (str.indexof input_str "|" 0) 1)))))
; ; Validate part1 contains exactly 3 segments when split by ";"
(assert (= (str.num_splits part1 ";") 3))
(declare-const part1_seg1 String)
(declare-const part1_seg2 String)
(declare-const part1_seg3 String)
(assert (= part1_seg1 (str.substr part1 0 (str.indexof part1 ";" 0))))
(assert (= part1_seg2 (str.substr part1 (+ (str.indexof part1 ";" 0) 1) (- (str.indexof part1 ";" (+ (str.indexof part1 ";" 0) 1)) (+ (str.indexof part1 ";" 0) 1)))))
(assert (= part1_seg3 (str.substr part1 (+ (str.indexof part1 ";" (+ (str.indexof part1 ";" 0) 1)) 1) (- (str.len part1) (+ (str.indexof part1 ";" (+ (str.indexof part1 ";" 0) 1)) 1)))))
; Nested split validation in part2
(assert (str.contains part2 ":"))
(declare-const part2_key String)
(declare-const part2_val String)
(assert (= part2_key (str.substr part2 0 (str.indexof part2 ":" 0))))
(assert (= part2_val (str.substr part2 (+ (str.indexof part2 ":" 0) 1) (- (str.len part2) (+ (str.indexof part2 ":" 0) 1)))))
; Cross-segment validation constraints
(assert (not (str.contains part1_seg1 ":"))) ; First segment shouldn't contain colon
(assert (str.contains part1_seg2 "=")) ; Second segment must contain equals
(assert (> (str.len part2_val) (str.len part2_key))) ; Value longer than key
(assert (= (str.at part1_seg3 0) (str.at part2_key 0))) ; First chars must match
; Complex length relationships
(assert (> (str.len part2) (+ (str.len part1_seg1) (str.len part1_seg2))))
(assert (< (str.len part1_seg3) (str.len part2_val)))
; Final validation combining all parts
(assert (str.contains (str.++ part1_seg1 part2_val) "valid"))
; --- End LLM Generated Constraints ---

(check-sat)

(exit)
(get-model)
