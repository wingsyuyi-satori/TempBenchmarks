(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Multi-format CSV/TSV validation
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; Input data lines with different delimiters
(declare-const tsv_record String)
(declare-const pipe_record String)
(declare-const semicolon_record String)

; TSV processing - tab-separated values
(declare-const tab_field_count Int)
(assert (= tab_field_count (str.num_splits tsv_record "\t")))

; Must have exactly 4 tab-separated fields
(assert (= tab_field_count 4))

; ; Extract TSV fields
(declare-const name_field String)
(declare-const age_field String)
(declare-const email_field String)
(declare-const status_field String)

(assert (= name_field (str.split_at tsv_record "\t" 0)))
(assert (= age_field (str.split_at tsv_record "\t" 1)))
(assert (= email_field (str.split_at tsv_record "\t" 2)))
(assert (= status_field (str.split_at tsv_record "\t" 3)))

; Name field validation - no empty names
(assert (> (str.len name_field) 0))
(assert (not (= name_field "")))

; ; Age field validation - numeric representation check
(assert (> (str.len age_field) 0))
(assert (<= (str.len age_field) 3))

; Email field must contain @ symbol
(assert (str.contains email_field "@"))

; Pipe-delimited record processing
(declare-const pipe_segments Int)
(assert (= pipe_segments (str.num_splits pipe_record "|")))

; Pipe record must have at least 5 segments
(assert (>= pipe_segments 5))

; ; Extract first two pipe-delimited fields
(declare-const product_id String)
(declare-const category String)
(assert (= product_id (str.split_at pipe_record "|" 0)))
(assert (= category (str.split_at pipe_record "|" 1)))

; Get remaining pipe fields for further processing
(declare-const pipe_tail String)
(assert (= pipe_tail (str.split_rest pipe_record "|" 2)))

; Product ID must be non-empty and alphanumeric pattern
(assert (> (str.len product_id) 0))
(assert (not (str.contains product_id " ")))

; Semicolon-delimited record validation
(declare-const semi_field_total Int)
(assert (= semi_field_total (str.num_splits semicolon_record ";")))

; Semicolon record allows empty fields but must have structure
(assert (>= semi_field_total 3))
(assert (<= semi_field_total 6))

; ; Extract semicolon fields with potential empty values
(declare-const config_key String)
(declare-const config_value String)
(declare-const config_type String)

(assert (= config_key (str.split_at semicolon_record ";" 0)))
(assert (= config_value (str.split_at semicolon_record ";" 1)))
(assert (= config_type (str.split_at semicolon_record ";" 2)))

; Config key cannot be empty but value can be
(assert (> (str.len config_key) 0))
; Config value CAN be empty (>= 0 length)
(assert (>= (str.len config_value) 0))

; Type field validation
(assert (or (= config_type "string") (= config_type "int") (= config_type "bool")))

; Cross-format validation - ensure no delimiter contamination
(assert (not (str.contains name_field "|")))
(assert (not (str.contains product_id "\t")))
(assert (not (str.contains config_key ",")))

; ; Escape sequence handling - check for escaped delimiters
(assert (not (str.contains tsv_record "\\t")))
(assert (not (str.contains pipe_record "\\|")))

(check-sat)
(exit)
(get-model)
