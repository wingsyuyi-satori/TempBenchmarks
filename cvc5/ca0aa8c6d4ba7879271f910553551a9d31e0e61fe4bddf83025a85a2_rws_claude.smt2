(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: LLM-based constraint generator
Application: Email validation with domain structure analysis
Target solver: CVC4, Z3, Z3str3, Z3-Noodler
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

; ; Email validation with detailed domain structure checking
(declare-const user_email String)
(declare-const backup_email String)

; Both emails must have exactly one "@" symbol (2 segments when split)
(assert (= (str.num_splits user_email "@") 2))
(assert (= (str.num_splits backup_email "@") 2))

; ; Extract components for primary email
(declare-const username String)
(declare-const primary_domain String)
(assert (= username (str.split_at user_email "@" 0)))
(assert (= primary_domain (str.split_at user_email "@" 1)))

; ; Extract components for backup email
(declare-const backup_user String)
(declare-const backup_domain String)
(assert (= backup_user (str.split_at backup_email "@" 0)))
(assert (= backup_domain (str.split_at backup_email "@" 1)))

; Username constraints - must be non-empty and reasonable length
(assert (and (> (str.len username) 0) (< (str.len username) 65)))
(assert (and (> (str.len backup_user) 0) (< (str.len backup_user) 65)))

; Domain structure validation - must have at least 2 segments (domain.tld)
(assert (>= (str.num_splits primary_domain ".") 2))
(assert (>= (str.num_splits backup_domain ".") 2))

; ; Extract first domain segment and ensure non-empty
(declare-const main_domain_name String)
(declare-const backup_domain_name String)
(assert (= main_domain_name (str.split_at primary_domain "." 0)))
(assert (= backup_domain_name (str.split_at backup_domain "." 0)))
(assert (> (str.len main_domain_name) 0))
(assert (> (str.len backup_domain_name) 0))

; ; TLD validation - extract everything after first dot
(declare-const primary_tld_section String)
(declare-const backup_tld_section String)
(assert (= primary_tld_section (str.split_rest primary_domain "." 1)))
(assert (= backup_tld_section (str.split_rest backup_domain "." 1)))

; TLD sections must be non-empty and reasonable length
(assert (and (> (str.len primary_tld_section) 1) (< (str.len primary_tld_section) 20)))
(assert (and (> (str.len backup_tld_section) 1) (< (str.len backup_tld_section) 20)))

; Additional constraints for valid email format
(assert (not (str.contains user_email "..")))
(assert (not (str.contains backup_email "..")))
(assert (not (str.prefixof username ".")))
(assert (not (str.prefixof backup_user ".")))
(assert (not (str.suffixof username ".")))
(assert (not (str.suffixof backup_user ".")))

; Domain names should not start or end with hyphen
(assert (not (str.prefixof main_domain_name "-")))
(assert (not (str.suffixof main_domain_name "-")))
(assert (not (str.prefixof backup_domain_name "-")))
(assert (not (str.suffixof backup_domain_name "-")))

; Ensure emails are different
(assert (not (= user_email backup_email)))

(check-sat)
(exit)
(get-model)
